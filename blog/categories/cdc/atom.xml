<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cdc | TOO MUCH CODING]]></title>
  <link href="http://toomuchcoding.com/blog/categories/cdc/atom.xml" rel="self"/>
  <link href="http://toomuchcoding.com/"/>
  <updated>2016-09-24T21:22:00+02:00</updated>
  <id>http://toomuchcoding.com/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 1.0.0.RELEASE available!]]></title>
    <link href="http://toomuchcoding.com/blog/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available/"/>
    <updated>2016-09-24T20:39:25+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/09/24/spring-cloud-contract-1-dot-0-0-dot-release-available</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/09/23/spring-cloud-contract-1-0-0-release-is-available">Spring Cloud Contract 1.0.0.RELEASE is available</a>.</p>

<p>I&rsquo;m really happy that the project is GA. Even though as the Accurest project we had already done a GA release, it really feels that a lot of effort was put in order to release the GA version under the Pivotal&rsquo;s Spring Cloud branding. Let&rsquo;s look at some numbers:</p>

<ul>
<li>first commit almost 2 years ago: <a href="https://github.com/spring-cloud/spring-cloud-contract/commit/dfaddaa98d645b818ba3947c9267ef7ac8ed9ba4">2014-12-06 18:20:29 by Jakub Kubrynski</a> - thanks to <a href="http://codearte.eu">Codearte</a> the authors of <a href="http://devskiller.com">DevSkiller</a> for their support!!!</li>
<li><a href="https://github.com/spring-cloud/spring-cloud-contract/commits/master">1.152 commits</a></li>
<li><a href="https://github.com/spring-cloud/spring-cloud-contract/graphs/contributors">20 contributors</a></li>
</ul>


<p>That&rsquo;s quite a lot of work! But there we are, with a library that has already been battle-proven on production by many companies, even before being GA as Spring Cloud Contract.</p>

<!-- more -->


<h2>What&rsquo;s new in comparison to Accurest?</h2>

<p>Like I mentioned, Accurest was already GA. So what are the main difference apart from rebranding and bug fixes?</p>

<ul>
<li>we&rsquo;ve moved from Grapes to Aether to download stubs</li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_what_is_this_value_consumer_producer">we generate fake data when you provide either consumer or producer in the DSL</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts">Consumer Contract approach is there</a></li>
<li>Spring Cloud Contract is available on <a href="http://start.spring.io">start.spring.io</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2">you can have more than one base class for your tests</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_additional_configuration">Spring Cloud Stub Runner Boot can register stubs in Eureka / Consul / Zookeeper using Spring Cloud</a></li>
<li>the whole build was moved from Gradle to the standard Spring Cloud Maven setup</li>
</ul>


<p>These are the Spring Cloud Contract Verifier changes. Apart from that Spring Cloud Contract consists of <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_wiremock">Spring Cloud Contract WireMock support</a> and <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_generating_stubs_using_restdocs">Spring Cloud Contract RestDocs</a>. Thanks to the first one the integration with <a href="http://wiremock.org">WireMock</a> is much more efficient and thanks to the latter you don&rsquo;t have to use the Groovy DSL - you can define your stubs by yourself by attaching them to an existing RestDocs test.</p>

<p>As far as Spring Cloud Contract Verifier is concerned the biggest two changes are the <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_common_repo_with_contracts">Consumer Contract support</a> and that <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_different_base_classes_for_contracts_2">you can have more than one base class for your tests</a>. Let&rsquo;s take a closer look what&rsquo;s there in the docs about them&hellip;</p>

<h3>Consumer Contract support</h3>

<p>Another way of storing contracts other than having them with the producer is keeping them in a common place. It can be related to security issues where the consumers can’t clone the producer’s code. Also if you keep contracts in a single place then you, as a producer, will know how many consumers you have and which consumer will you break with your local changes.</p>

<h4>Repo structure</h4>

<p>Let’s assume that we have a producer with coordinates com.example:server and 3 consumers: client1, client2, client3. Then in the repository with common contracts you would have the following setup (which you can checkout here:</p>

<pre><code>├── com
│   └── example
│       └── server
│           ├── client1
│           │   └── expectation.groovy
│           ├── client2
│           │   └── expectation.groovy
│           ├── client3
│           │   └── expectation.groovy
│           └── pom.xml
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    └── assembly
        └── contracts.xml
</code></pre>

<p>As you can see the under the slash-delimited groupid / artifact id folder (<code>com/example/server</code>) you have expectations of the 3 consumers (<code>client1</code>, <code>client2</code> and <code>client3</code>). Expectations are the standard Groovy DSL contract files as described throughout this documentation. This repository has to produce a JAR file that maps one to one to the contents of the repo.</p>

<p>Example of a <code>pom.xml</code> inside the <code>server</code> folder.</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;server&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;name&gt;Server Stubs&lt;/name&gt;
    &lt;description&gt;POM used to install locally stubs for consumer side&lt;/description&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.4.0.BUILD-SNAPSHOT&lt;/version&gt;
        &lt;relativePath /&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
        &lt;spring-cloud-contract.version&gt;1.0.1.BUILD-SNAPSHOT&lt;/spring-cloud-contract.version&gt;
        &lt;spring-cloud-dependencies.version&gt;Camden.BUILD-SNAPSHOT&lt;/spring-cloud-dependencies.version&gt;
    &lt;/properties&gt;

    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;${spring-cloud-dependencies.version}&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;${spring-cloud-contract.version}&lt;/version&gt;
                &lt;extensions&gt;true&lt;/extensions&gt;
                &lt;configuration&gt;
                    &lt;!-- By default it would search under src/test/resources/ --&gt;
                    &lt;contractsDirectory&gt;${project.basedir}&lt;/contractsDirectory&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

    &lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-snapshots&lt;/id&gt;
            &lt;name&gt;Spring Snapshots&lt;/name&gt;
            &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-milestones&lt;/id&gt;
            &lt;name&gt;Spring Milestones&lt;/name&gt;
            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
        &lt;repository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;name&gt;Spring Releases&lt;/name&gt;
            &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;pluginRepositories&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-snapshots&lt;/id&gt;
            &lt;name&gt;Spring Snapshots&lt;/name&gt;
            &lt;url&gt;https://repo.spring.io/snapshot&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-milestones&lt;/id&gt;
            &lt;name&gt;Spring Milestones&lt;/name&gt;
            &lt;url&gt;https://repo.spring.io/milestone&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
        &lt;pluginRepository&gt;
            &lt;id&gt;spring-releases&lt;/id&gt;
            &lt;name&gt;Spring Releases&lt;/name&gt;
            &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/pluginRepository&gt;
    &lt;/pluginRepositories&gt;

&lt;/project&gt;
</code></pre>

<p>As you can see there are no dependencies other than the Spring Cloud Contract Verifier Maven plugin. Those poms are necessary for the consumer side to run <code>mvn clean install -DskipTests</code> to locally install stubs of the producer project.</p>

<p>The <code>pom.xml</code> in the root folder can look like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
    &lt;artifactId&gt;contracts&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;name&gt;Contracts&lt;/name&gt;
    &lt;description&gt;Contains all the Spring Cloud Contracts, well, contracts. JAR used by the producers to generate tests and stubs&lt;/description&gt;

    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;/properties&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;id&gt;contracts&lt;/id&gt;
                        &lt;phase&gt;prepare-package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;single&lt;/goal&gt;
                        &lt;/goals&gt;
                        &lt;configuration&gt;
                            &lt;attach&gt;true&lt;/attach&gt;
                            &lt;descriptor&gt;${basedir}/src/assembly/contracts.xml&lt;/descriptor&gt;
                            &lt;!-- If you want an explicit classifier remove the following line --&gt;
                            &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt;
                        &lt;/configuration&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</code></pre>

<p>It’s using the assembly plugin in order to build the JAR with all the contracts. Example of such setup is here:</p>

<pre><code>&lt;assembly xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.3 http://maven.apache.org/xsd/assembly-1.1.3.xsd"&gt;
    &lt;id&gt;project&lt;/id&gt;
    &lt;formats&gt;
        &lt;format&gt;jar&lt;/format&gt;
    &lt;/formats&gt;
    &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;
    &lt;fileSets&gt;
        &lt;fileSet&gt;
            &lt;directory&gt;${project.basedir}&lt;/directory&gt;
            &lt;outputDirectory&gt;/&lt;/outputDirectory&gt;
            &lt;useDefaultExcludes&gt;true&lt;/useDefaultExcludes&gt;
            &lt;excludes&gt;
                &lt;exclude&gt;**/${project.build.directory}/**&lt;/exclude&gt;
                &lt;exclude&gt;mvnw&lt;/exclude&gt;
                &lt;exclude&gt;mvnw.cmd&lt;/exclude&gt;
                &lt;exclude&gt;.mvn/**&lt;/exclude&gt;
                &lt;exclude&gt;src/**&lt;/exclude&gt;
            &lt;/excludes&gt;
        &lt;/fileSet&gt;
    &lt;/fileSets&gt;
&lt;/assembly&gt;
</code></pre>

<h4>Workflow</h4>

<p>The workflow would look similar to the one presented in the <a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_step_by_step_guide_to_cdc">Step by step guide to CDC</a>. The only difference is that the producer doesn’t own the contracts anymore. So the consumer and the producer have to work on common contracts in a common repository.</p>

<h4>Consumer</h4>

<p>When the consumer wants to work on the contracts offline, instead of cloning the producer code, the consumer team clones the common repository, goes to the required producer’s folder (e.g. <code>com/example/server</code>) and runs <code>mvn clean install -DskipTests</code> to install locally the stubs converted from the contracts.</p>

<p><strong>REMEMBER! You need to have Maven installed locally</strong></p>

<h4>Producer</h4>

<p>As a producer it’s enough to alter the Spring Cloud Contract Verifier to provide the URL and the dependency of the JAR containing the contracts:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;contractsRepositoryUrl&gt;http://link/to/your/nexus/or/artifactory/or/sth&lt;/contractsRepositoryUrl&gt;
        &lt;contractDependency&gt;
            &lt;groupId&gt;com.example.standalone&lt;/groupId&gt;
            &lt;artifactId&gt;contracts&lt;/artifactId&gt;
        &lt;/contractDependency&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>With this setup the JAR with groupid <code>com.example.standalone</code> and artifactid contracts will be downloaded from <code>http://link/to/your/nexus/or/artifactory/or/sth</code>. It will be then unpacked in a local temporary folder and contracts present under the <code>com/example/server</code> will be picked as the ones used to generate the tests and the stubs. Due to this convention the producer team will know which consumer teams will be broken when some incompatible changes are done.</p>

<p>The rest of the flow looks the same.</p>

<h3>More than one base class</h3>

<p>That was quite a problem when providing one single base class for all the tests. After some time the mock configurations were enormous! That&rsquo;s why we&rsquo;ve added a possibility to map a contract to its test base class.</p>

<h4>Gradle</h4>

<p>If your base classes differ between contracts you can tell the Spring Cloud Contract plugin which class should get extended by the autogenerated tests. You have two options:</p>

<ul>
<li>follow a convention by providing the <code>packageWithBaseClasses</code></li>
<li>provide explicit mapping via <code>baseClassMappings</code></li>
</ul>


<h5>Convention</h5>

<p>The convention is such that if you have a contract under e.g. <code>src/test/resources/contract/foo/bar/baz/</code> and provide the value of the <code>packageWithBaseClasses</code> property to <code>com.example.base</code> then we will assume that there is a <code>BarBazBase</code> class under <code>com.example.base</code> package. In other words we take last two parts of package if they exist and form a class with a <code>Base</code> suffix. Takes precedence over <code>baseClassForTests</code>. Example of usage in the contracts closure:</p>

<pre><code>packageWithBaseClasses = 'com.example.base'
</code></pre>

<h5>Mapping</h5>

<p>You can manually map a regular expression of the contract’s <em>package</em> (package, not folder) to fully qualified name of the base class for the matched contract. Let’s take a look at the following example:</p>

<pre><code>baseClassForTests = "com.example.FooBase"
baseClassMappings {
    baseClassMapping('.*com.*', 'com.example.ComBase')
    baseClassMapping('.*bar.*':'com.example.BarBase')
}
</code></pre>

<p>Let’s assume that you have contracts under</p>

<ul>
<li><code>src/test/resources/contract/com/</code></li>
<li><code>src/test/resources/contract/foo/</code></li>
</ul>


<p>By providing the <code>baseClassForTests</code> we have a fallback in case mapping didn’t succeed (you could also provide the <code>packageWithBaseClasses</code> as fallback). That way the tests generated from <code>src/test/resources/contract/com/</code> contracts will be extending the <code>com.example.ComBase</code> whereas the rest of tests will extend <code>com.example.FooBase</code> cause they don&rsquo;t match the base class mapping for <code>bar</code> folder.</p>

<h4>Maven</h4>

<p>Let&rsquo;s now look how it looks like for Maven.</p>

<h5>Convention</h5>

<p>To accomplish the same result as the one presented for Gradle you&rsquo;d have to set your configuration like this:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;packageWithBaseClasses&gt;com.example.base&lt;/packageWithBaseClasses&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h5>Mapping</h5>

<p>You can manually map a regular expression of the contract’s package to fully qualified name of the base class for the matched contract. You have to provide a list <code>baseClassMappings</code> of <code>baseClassMapping</code> that takes a <code>contractPackageRegex</code> to <code>baseClassFQN</code> mapping. Let’s take a look at the following example:</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-contract-maven-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        &lt;baseClassForTests&gt;com.example.FooBase&lt;/baseClassForTests&gt;
        &lt;baseClassMappings&gt;
            &lt;baseClassMapping&gt;
                &lt;contractPackageRegex&gt;.*com.*&lt;/contractPackageRegex&gt;
                &lt;baseClassFQN&gt;com.example.ComBase&lt;/baseClassFQN&gt;
            &lt;/baseClassMapping&gt;
            &lt;baseClassMapping&gt;
                &lt;contractPackageRegex&gt;.*bar.*&lt;/contractPackageRegex&gt;
                &lt;baseClassFQN&gt;com.example.BarBase&lt;/baseClassFQN&gt;
            &lt;/baseClassMapping&gt;
        &lt;/baseClassMappings&gt;
    &lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<h2>Summary</h2>

<p>In this blog post we&rsquo;ve checked what are the new and shiny features in the GA of Spring Cloud Contract. We&rsquo;ve also checked some history around Accurest to Spring Cloud Contract migration.</p>

<h2>Links</h2>

<p>Here you can find interesting links related to Spring Cloud Contract Verifier:</p>

<ul>
<li><a href="https://github.com/spring-cloud/spring-cloud-contract/">Spring Cloud Contract Github Repository</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/">Spring Cloud Contract Main project page</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html">Spring Cloud Contract Documentation</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract.html#_spring_cloud_contract_stub_runner">Spring Cloud Contract Stub Runner Documentation</a></li>
<li><a href="https://gitter.im/spring-cloud/spring-cloud-contract">Spring Cloud Contract Gitter</a></li>
<li><a href="https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/">Spring Cloud Contract Maven Plugin Documentation</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Cloud Contract 1.0.0.M1 Released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released/"/>
    <updated>2016-07-25T17:07:39+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/07/25/spring-cloud-contract-1-dot-0-0-dot-m1-released</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just published an article at the Spring blog about <a href="https://spring.io/blog/2016/07/25/spring-cloud-contract-1-0-0-m1-released">Spring Cloud Contract 1.0.0.M1 Release</a>. Check out the new project formerly known as Accurest!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accurest becomes part of the Spring Cloud Contract]]></title>
    <link href="http://toomuchcoding.com/blog/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract/"/>
    <updated>2016-06-24T18:43:07+02:00</updated>
    <id>http://toomuchcoding.com/blog/2016/06/24/accurest-becomes-part-of-the-spring-cloud-contract</id>
    <content type="html"><![CDATA[<p>I&rsquo;m extremely happy to announce that we have successfully rebranded the <a href="https://codearte.github.io/accurest">Accurest project</a>. It&rsquo;s officially become part of the <a href="https://github.com/spring-cloud/spring-cloud-contract">Spring Cloud Contract</a> initiative. Ladies and Gentlemen please welcome the new projects:</p>

<ul>
<li><a href="https://codearte.github.io/accurest/">Spring Cloud Contract Verifier</a></li>
<li><a href="https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner">Spring Cloud Contract Stub Runner</a></li>
</ul>


<!-- more -->


<h2>A little bit of history</h2>

<p>Accurest was created because of lack of an easy-to-use tool for doing <a href="http://martinfowler.com/articles/consumerDrivenContracts.html">Consumer Driven Contracts</a>. From our production experience the biggest problem was lack of verification that the defined contract actually does what it says it does. We wanted to ensure that from the contract automatically tests are generated so that we can have a proof that the stubs are reliable. Since there was no such tool the first commit of Accurest took place on 12/2014. The very idea and its implementation was initially set by <a href="http://www.kubrynski.com/">Jakub Kubrynski</a> and me. The last available version of Accurest was 1.1.0 released on 06/2016 (the docs for the old version are <a href="https://codearte.github.io/accurest/deprecated/">available here</a>). During these 19 months a lot of feedback has been gathered. The tool has received a lot of very good reception and that made us want to work even harder. Many times we have decided to decrease the time required for sleeping so as to fix a bug or develop a new feature in Accurest.</p>

<h2>Notable features</h2>

<p>Speaking of features, especially quite a few of them definitely makes Accurest stand out on the &ldquo;market&rdquo; of Consumer Driven Contract (CDC) tooling. Out of many the most interesting are:</p>

<ul>
<li>Possibility to do CDC with messaging</li>
<li>Clear and easy to use, statically typed DSL</li>
<li>Possibility to copy paste your current JSON file to the contract and only edit its elements</li>
<li>Automatic generation of tests from the defined Contract</li>
<li>Stub Runner functionality - the stubs are automatically downloaded at runtime from Nexus / Artifactory</li>
<li>Spring Cloud integration - no discovery service is needed for integration tests</li>
</ul>


<p>For more information check out my posts about <a href="http://toomuchcoding.com/blog/2016/04/06/accurest-stubrunner-released/">Stub Runner</a>, <a href="http://toomuchcoding.com/blog/2016/04/30/accurest-and-stub-runner-1-dot-1-0-dot-m3/">Accurest Messaging</a> or <a href="https://codearte.github.io/accurest/">just read the docs</a>.</p>

<h2>Spring Cloud Contract</h2>

<p>In Pivotal we came to the conclusion that Accurest could become an interesting addition to our Spring Cloud tooling. Due to the increased interest of the community in the Consumer Driven Contracts approach we&rsquo;ve decided to start the <a href="https://github.com/spring-cloud/spring-cloud-contract">Spring Cloud Contract</a> initiative.</p>

<p>Accurest became <em>Spring Cloud Contract Verifier</em> (note: the name might change in the future) but for the time being will remain in the <a href="https://github.com/Codearte">Codearte repository</a>. It&rsquo;s becoming the part of Spring Cloud tooling as a mature tool with a growing community around it. Some arguments for that are that it has:</p>

<ul>
<li><a href="https://codearte.github.io/accurest/">a nice AsciiDoc documentation that was completely rewritten following users' feedback</a></li>
<li><a href="https://gitter.im/Codearte/accurest">active Gitter channel where we try to immediately answer any support questions</a></li>
<li><a href="https://github.com/Codearte/accurest/stargazers">Over 80 stars on Github and counting ;)</a></li>
</ul>


<p>Since we believe very much in the Consumer Driven Contract approach we also want to do the library in a Client Driven way. That means that we (server side) are very open to your feedback (consumer side) and want you be the main driver of changes in the library.</p>

<h2>Credits</h2>

<p>The Accurest project would never come to life without the hard work of the <a href="http://codearte.io">Codearte</a> developers (the order is random):</p>

<ul>
<li><a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li>
<li><a href="http://www.kubrynski.com">Jakub Kubrynski</a></li>
<li><a href="https://solidsoft.wordpress.com/">Marcin Zajaczkowski</a></li>
<li><a href="https://github.com/mariuszs">Mariusz Smykula</a></li>
</ul>


<p>and obviously everybody who has <a href="https://github.com/Codearte/accurest/graphs/contributors">ever commited something to the project</a>.</p>

<h2>Links</h2>

<p>If you want to read more about <em>Spring Cloud Contract Verifier</em> just check out the following links.</p>

<ul>
<li><a href="https://github.com/Codearte/accurest">Spring Cloud Contract Verifier Github Repository</a></li>
<li><a href="http://codearte.github.io/accurest">Spring Cloud Contract Verifier Documentation</a></li>
<li><a href="http://codearte.github.io/accurest/deprecated">Accurest Legacy Documentation</a></li>
<li><a href="https://codearte.github.io/accurest/#spring-cloud-contract-stub-runner">Spring Cloud Contract Stub Runner Documentation</a></li>
<li><a href="http://codearte.github.io/accurest/#stub-runner-for-messaging">Spring Cloud Contract Stub Runner Messaging Documentation</a></li>
<li><a href="https://gitter.im/Codearte/accurest">Spring Cloud Contract Verifier Gitter</a></li>
<li><a href="https://github.com/Codearte/accurest-maven-plugin">Spring Cloud Contract Verifier Maven Plugin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Assert lib released]]></title>
    <link href="http://toomuchcoding.com/blog/2016/02/27/json-assert-lib-released/"/>
    <updated>2016-02-27T23:20:00+01:00</updated>
    <id>http://toomuchcoding.com/blog/2016/02/27/json-assert-lib-released</id>
    <content type="html"><![CDATA[<div class='post'>
I'm really happy to present the <a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>&nbsp;-&nbsp;over-the-weekend project that came out from the <a href="https://github.com/Codearte/accurest">AccuREST library</a>. This post will describe the rationale behind creating this tool and how to use it.<br /><br /><br /><a name='more'></a>
<!--more-->
<br /><br /><h4>Rationale</h4>In AccuREST (the Consumer Driven Contracts implementation library) we're creating tests of the server side. For more information on what is AccuREST and what Consumer Driven Contracts is check the <a href="https://github.com/Codearte/accurest/wiki">AccurREST wiki</a>. Anyways, we're checking if the response from the server matches the one described in the contract.<br /><br />So having such a Groovy DSL:<br /><br /><pre style="background: #fff; color: black;">io.codearte.accurest.dsl.GroovyDsl<span style="color: #0100b6; font-weight: 700;">.</span>make {<br />    priority <span style="color: #cd0000; font-style: italic;">1</span><br />    request {<br />        method <span style="color: #d80800;">'POST'</span><br />        url <span style="color: #d80800;">'/users/password'</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">email</span>: $(stub(optional(regex(email()))), test(<span style="color: #d80800;">'abc@abc.com'</span>)),<br />                <span style="color: #c5060b; font-style: italic;">callback_url</span>: $(stub(regex(hostname())), test(<span style="color: #d80800;">'http://partners.com'</span>))<br />        )<br />    }<br />    response {<br />        status <span style="color: #cd0000; font-style: italic;">404</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">code</span>: value(stub(<span style="color: #d80800;">"123123"</span>), test(optional(<span style="color: #d80800;">"123123"</span>))),<br />                <span style="color: #c5060b; font-style: italic;">message</span>: <span style="color: #d80800;">"User not found by email = [<span style="color: #26b31a;">${value(test(regex(email())), stub('not.existing@user.com'))}</span>]"</span><br />        )<br />    }<br />}<br /></pre><br />Resulted in creation of the following server side response verification<br /><br /><pre style="background: #fff; color: black;"><span style="color: #c5060b; font-style: italic;">given</span>:<br />  def request <span style="color: #0100b6; font-weight: 700;">=</span> given()<br />    .header(<span style="color: #d80800;">'Content-Type'</span>, <span style="color: #d80800;">'application/json'</span>)<br />    .body(<span style="color: #d80800;">'{"email":"abc@abc.com","callback_url":"http://partners.com"}'</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">when</span>:<br />  def response <span style="color: #0100b6; font-weight: 700;">=</span> given()<span style="color: #0100b6; font-weight: 700;">.</span>spec(request)<br />    .post(<span style="color: #d80800;">"/users/password"</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">then</span>:<br />  response<span style="color: #0100b6; font-weight: 700;">.</span>statusCode <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #cd0000; font-style: italic;">404</span><br />  response<span style="color: #0100b6; font-weight: 700;">.</span>header(<span style="color: #d80800;">'Content-Type'</span>)  <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #d80800;">'application/json'</span><br /> <span style="color: #c5060b; font-style: italic;">and</span>:<br />  DocumentContext parsedJson <span style="color: #0100b6; font-weight: 700;">=</span> JsonPath<span style="color: #0100b6; font-weight: 700;">.</span>parse(response<span style="color: #0100b6; font-weight: 700;">.</span>body<span style="color: #0100b6; font-weight: 700;">.</span>asString())<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /><br /></pre><br />AccuREST users stated that their biggest problem is this part:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /></pre><br />They said that JSON Paths are too difficult for them to read.<br /><br />That's why I've created the&nbsp;<a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>. So that instead of the aforementioned code one gets sth like this:<br /><br /><pre style="background: #fff; color: black;">  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'code'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'123123?'</span>)<br />  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'message'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'</span>);<br /></pre><br /><h4>How to add it to your project</h4><br />If your using Gradle just add (<a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.blogspot.toomuchcoding%22%20a%3A%22jsonassert%22">check the latest version number</a>):<br /><br /><pre style="background: #fff; color: black;"> testCompile `com<span style="color: #0100b6; font-weight: 700;">.</span>blogspot<span style="color: #0100b6; font-weight: 700;">.</span><span style="color: #c5060b; font-style: italic;">toomuchcoding</span>:<span style="color: #c5060b; font-style: italic;">jsonassert</span>:<span style="color: #cd0000; font-style: italic;">0.1</span><span style="color: #cd0000; font-style: italic;">.2</span>`<br /></pre><br />and if Maven just add:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">dependency</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">groupId</span>&gt;</span>com.blogspot.toomuchcoding<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">groupId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">artifactId</span>&gt;</span>jsonassert<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">artifactId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">version</span>&gt;</span>0.1.2<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">version</span>&gt;</span><br /><span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">dependency</span>&gt;</span><br /></pre><h4><br />How to use it</h4><br />Since almost everything in JSON Assert is package scoped you have access to two public classes. One of which is the &nbsp;<span style="font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;"><a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonAssertion.java">JsonAssertion</a></span> class. It gives you a couple of public methods that give you the entry point to the fluent interface of the library.<br /><br />You can check the JavaDocs of the <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonVerifiable.java">JsonVerifiable</a> interface in order to see what kind of methods can be used.<br /><br /><h4>Examples</h4><div><br />Best examples are <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/test/groovy/com/blogspot/toomuchcoding/jsonassert/JsonAssertionSpec.groovy">tests</a>. I'll show you a couple of them here.<br /><br /><br /><b>Example 1</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">[ {<br />                                <span style="color: #d80800;">"some"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}, {<span style="color: #d80800;">"anothernested"</span>: { <span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name3"</span>} }<br />                                        ]<br />                                    }<br />                                }<br />                            },<br />                            {<br />                                <span style="color: #d80800;">"someother"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}<br />                                        ]<br />                                    }<br />                                }<br />                            }<br />                        ]<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$[<span style="color: #0100b6; font-weight: 700;">*</span>].some.nested.withlist[<span style="color: #0100b6; font-weight: 700;">*</span>].anothernested[<span style="color: #0100b6; font-weight: 700;">?</span>(@.name == <span style="color: #d80800;">'name3'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array()<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"some"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"nested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"withlist"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"anothernested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"name"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"name3"</span>)<br /></pre><br /><b>Example 2</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">{<br />    <span style="color: #d80800;">"property1"</span>: [<br />        { <span style="color: #d80800;">"property2"</span>: <span style="color: #d80800;">"test1"</span>},<br />        { <span style="color: #d80800;">"property3"</span>: <span style="color: #d80800;">"test2"</span>}<br />    ]<br />}<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$.property1[<span style="color: #0100b6; font-weight: 700;">*</span>][<span style="color: #0100b6; font-weight: 700;">?</span>(@.property2 == <span style="color: #d80800;">'test1'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"property1"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>contains(<span style="color: #d80800;">"property2"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"test1"</span>)<br /></pre><br /></div><h4>Future plans</h4><br />It would be nice to:<br /><br /><ul><li>integrate with <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li><li>add more <a href="https://github.com/jayway/JsonPath#functions">JSON Path features</a> (functions, filters etc.)</li></ul><div><br /></div><h4>Links</h4><ul><li><a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert</a></li><li><a href="https://github.com/Codearte/accurest/wiki">AccuREST</a></li><li><a href="https://www.youtube.com/watch?v=daafmTYFoDU">Video about AccuREST </a>by <a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li><li><a href="https://github.com/jayway/JsonPath">Jayway JSON Path</a></li><li><a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li></ul><br /><br /></div>

]]></content>
  </entry>
  
</feed>
