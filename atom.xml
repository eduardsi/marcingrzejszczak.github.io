<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[TOO MUCH CODING BLOG]]></title>
  <link href="http://marcingrzejszczak.github.io/atom.xml" rel="self"/>
  <link href="http://marcingrzejszczak.github.io/"/>
  <updated>2016-03-02T08:13:48+01:00</updated>
  <id>http://marcingrzejszczak.github.io/</id>
  <author>
    <name><![CDATA[Marcin Grzejszczak]]></name>
    <email><![CDATA[blog@toomuchcoding.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON Assert Lib Released]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2016/02/27/json-assert-lib-released/"/>
    <updated>2016-02-27T23:20:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2016/02/27/json-assert-lib-released</id>
    <content type="html"><![CDATA[<div class='post'>
I'm really happy to present the <a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>&nbsp;-&nbsp;over-the-weekend project that came out from the <a href="https://github.com/Codearte/accurest">AccuREST library</a>. This post will describe the rationale behind creating this tool and how to use it.<br /><br /><br /><a name='more'></a>
<!--more-->
<br /><br /><h4>Rationale</h4>In AccuREST (the Consumer Driven Contracts implementation library) we're creating tests of the server side. For more information on what is AccuREST and what Consumer Driven Contracts is check the <a href="https://github.com/Codearte/accurest/wiki">AccurREST wiki</a>. Anyways, we're checking if the response from the server matches the one described in the contract.<br /><br />So having such a Groovy DSL:<br /><br /><pre style="background: #fff; color: black;">io.codearte.accurest.dsl.GroovyDsl<span style="color: #0100b6; font-weight: 700;">.</span>make {<br />    priority <span style="color: #cd0000; font-style: italic;">1</span><br />    request {<br />        method <span style="color: #d80800;">'POST'</span><br />        url <span style="color: #d80800;">'/users/password'</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">email</span>: $(stub(optional(regex(email()))), test(<span style="color: #d80800;">'abc@abc.com'</span>)),<br />                <span style="color: #c5060b; font-style: italic;">callback_url</span>: $(stub(regex(hostname())), test(<span style="color: #d80800;">'http://partners.com'</span>))<br />        )<br />    }<br />    response {<br />        status <span style="color: #cd0000; font-style: italic;">404</span><br />        headers {<br />            header <span style="color: #d80800;">'Content-Type'</span>: <span style="color: #d80800;">'application/json'</span><br />        }<br />        body(<br />                <span style="color: #c5060b; font-style: italic;">code</span>: value(stub(<span style="color: #d80800;">"123123"</span>), test(optional(<span style="color: #d80800;">"123123"</span>))),<br />                <span style="color: #c5060b; font-style: italic;">message</span>: <span style="color: #d80800;">"User not found by email = [<span style="color: #26b31a;">${value(test(regex(email())), stub('not.existing@user.com'))}</span>]"</span><br />        )<br />    }<br />}<br /></pre><br />Resulted in creation of the following server side response verification<br /><br /><pre style="background: #fff; color: black;"><span style="color: #c5060b; font-style: italic;">given</span>:<br />  def request <span style="color: #0100b6; font-weight: 700;">=</span> given()<br />    .header(<span style="color: #d80800;">'Content-Type'</span>, <span style="color: #d80800;">'application/json'</span>)<br />    .body(<span style="color: #d80800;">'{"email":"abc@abc.com","callback_url":"http://partners.com"}'</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">when</span>:<br />  def response <span style="color: #0100b6; font-weight: 700;">=</span> given()<span style="color: #0100b6; font-weight: 700;">.</span>spec(request)<br />    .post(<span style="color: #d80800;">"/users/password"</span>)<br /><br /> <span style="color: #c5060b; font-style: italic;">then</span>:<br />  response<span style="color: #0100b6; font-weight: 700;">.</span>statusCode <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #cd0000; font-style: italic;">404</span><br />  response<span style="color: #0100b6; font-weight: 700;">.</span>header(<span style="color: #d80800;">'Content-Type'</span>)  <span style="color: #0100b6; font-weight: 700;">==</span> <span style="color: #d80800;">'application/json'</span><br /> <span style="color: #c5060b; font-style: italic;">and</span>:<br />  DocumentContext parsedJson <span style="color: #0100b6; font-weight: 700;">=</span> JsonPath<span style="color: #0100b6; font-weight: 700;">.</span>parse(response<span style="color: #0100b6; font-weight: 700;">.</span>body<span style="color: #0100b6; font-weight: 700;">.</span>asString())<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /><br /></pre><br />AccuREST users stated that their biggest problem is this part:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.code =~ /(123123)?/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br />  <span style="color: #0100b6; font-weight: 700;">!</span>parsedJson<span style="color: #0100b6; font-weight: 700;">.</span>read(<span style="color: #d80800;">'''$[?(@.message =~ /User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'''</span>, JSONArray)<span style="color: #0100b6; font-weight: 700;">.</span>empty<br /></pre><br />They said that JSON Paths are too difficult for them to read.<br /><br />That's why I've created the&nbsp;<a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert library</a>. So that instead of the aforementioned code one gets sth like this:<br /><br /><pre style="background: #fff; color: black;">  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'code'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'123123?'</span>)<br />  assertThatJson(parsedJson)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">'message'</span>)<span style="color: #0100b6; font-weight: 700;">.</span>matches(<span style="color: #d80800;">'User not found by email = <span style="color: #26b31a;">\\</span>[[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+<span style="color: #26b31a;">\\</span>.[a-zA-Z]{2,4}<span style="color: #26b31a;">\\</span>]/)]'</span>);<br /></pre><br /><h4>How to add it to your project</h4><br />If your using Gradle just add (<a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.blogspot.toomuchcoding%22%20a%3A%22jsonassert%22">check the latest version number</a>):<br /><br /><pre style="background: #fff; color: black;"> testCompile `com<span style="color: #0100b6; font-weight: 700;">.</span>blogspot<span style="color: #0100b6; font-weight: 700;">.</span><span style="color: #c5060b; font-style: italic;">toomuchcoding</span>:<span style="color: #c5060b; font-style: italic;">jsonassert</span>:<span style="color: #cd0000; font-style: italic;">0.1</span><span style="color: #cd0000; font-style: italic;">.2</span>`<br /></pre><br />and if Maven just add:<br /><br /><pre style="background: #fff; color: black;"><span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">dependency</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">groupId</span>&gt;</span>com.blogspot.toomuchcoding<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">groupId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">artifactId</span>&gt;</span>jsonassert<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">artifactId</span>&gt;</span><br />    <span style="color: #1c02ff;">&lt;<span style="font-weight: 700;">version</span>&gt;</span>0.1.2<span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">version</span>&gt;</span><br /><span style="color: #1c02ff;">&lt;/<span style="font-weight: 700;">dependency</span>&gt;</span><br /></pre><h4><br />How to use it</h4><br />Since almost everything in JSON Assert is package scoped you have access to two public classes. One of which is the &nbsp;<span style="font-family: &quot;courier new&quot; , &quot;courier&quot; , monospace;"><a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonAssertion.java">JsonAssertion</a></span> class. It gives you a couple of public methods that give you the entry point to the fluent interface of the library.<br /><br />You can check the JavaDocs of the <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/main/java/com/blogspot/toomuchcoding/jsonassert/JsonVerifiable.java">JsonVerifiable</a> interface in order to see what kind of methods can be used.<br /><br /><h4>Examples</h4><div><br />Best examples are <a href="https://github.com/marcingrzejszczak/jsonassert/blob/master/src/test/groovy/com/blogspot/toomuchcoding/jsonassert/JsonAssertionSpec.groovy">tests</a>. I'll show you a couple of them here.<br /><br /><br /><b>Example 1</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">[ {<br />                                <span style="color: #d80800;">"some"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}, {<span style="color: #d80800;">"anothernested"</span>: { <span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name3"</span>} }<br />                                        ]<br />                                    }<br />                                }<br />                            },<br />                            {<br />                                <span style="color: #d80800;">"someother"</span> : {<br />                                    <span style="color: #d80800;">"nested"</span> : {<br />                                        <span style="color: #d80800;">"json"</span> : <span style="color: #d80800;">"with value"</span>,<br />                                        <span style="color: #d80800;">"anothervalue"</span>: <span style="color: #cd0000; font-style: italic;">4</span>,<br />                                        <span style="color: #d80800;">"withlist"</span> : [<br />                                            { <span style="color: #d80800;">"name"</span> :<span style="color: #d80800;">"name1"</span>} , {<span style="color: #d80800;">"name"</span>: <span style="color: #d80800;">"name2"</span>}<br />                                        ]<br />                                    }<br />                                }<br />                            }<br />                        ]<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$[<span style="color: #0100b6; font-weight: 700;">*</span>].some.nested.withlist[<span style="color: #0100b6; font-weight: 700;">*</span>].anothernested[<span style="color: #0100b6; font-weight: 700;">?</span>(@.name == <span style="color: #d80800;">'name3'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array()<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"some"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"nested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"withlist"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"anothernested"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>field(<span style="color: #d80800;">"name"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"name3"</span>)<br /></pre><br /><b>Example 2</b><br /><br />Having a JSON:<br /><br /><pre style="background: #fff; color: black;">{<br />    <span style="color: #d80800;">"property1"</span>: [<br />        { <span style="color: #d80800;">"property2"</span>: <span style="color: #d80800;">"test1"</span>},<br />        { <span style="color: #d80800;">"property3"</span>: <span style="color: #d80800;">"test2"</span>}<br />    ]<br />}<br /></pre><br /></div><div><br /></div><div>Instead of writing:</div><div><br /><pre style="background: #fff; color: black;">$.property1[<span style="color: #0100b6; font-weight: 700;">*</span>][<span style="color: #0100b6; font-weight: 700;">?</span>(@.property2 == <span style="color: #d80800;">'test1'</span>)]<br /></pre></div><div><br /></div><div>you can write<br /><br /><pre style="background: #fff; color: black;"><span style="color: #3c4c72; font-weight: 700;">assertThat</span>(json)<span style="color: #0100b6; font-weight: 700;">.</span>array(<span style="color: #d80800;">"property1"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>contains(<span style="color: #d80800;">"property2"</span>)<span style="color: #0100b6; font-weight: 700;">.</span>isEqualTo(<span style="color: #d80800;">"test1"</span>)<br /></pre><br /></div><h4>Future plans</h4><br />It would be nice to:<br /><br /><ul><li>integrate with <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li><li>add more <a href="https://github.com/jayway/JsonPath#functions">JSON Path features</a> (functions, filters etc.)</li></ul><div><br /></div><h4>Links</h4><ul><li><a href="https://github.com/marcingrzejszczak/jsonassert">JSON Assert</a></li><li><a href="https://github.com/Codearte/accurest/wiki">AccuREST</a></li><li><a href="https://www.youtube.com/watch?v=daafmTYFoDU">Video about AccuREST </a>by <a href="https://twitter.com/olga_maciaszek">Olga Maciaszek-Sharma</a></li><li><a href="https://github.com/jayway/JsonPath">Jayway JSON Path</a></li><li><a href="http://joel-costigliola.github.io/assertj/">AssertJ</a></li></ul><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post on Spring Blog]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2016/01/04/post-on-spring-blog/"/>
    <updated>2016-01-04T18:28:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2016/01/04/post-on-spring-blog</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />Since December I'm working for Pivotal and the Spring Cloud team. I've just posted my first blog post on the Spring blog. Check it out!<br /><br /><a href="https://spring.io/blog/2016/01/04/testing-spring-cloud-projects">Testing Spring Cloud Projects</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Business Value Gone Wild]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2015/10/16/business-value-gone-wild/"/>
    <updated>2015-10-16T17:58:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2015/10/16/business-value-gone-wild</id>
    <content type="html"><![CDATA[<div class='post'>
This blog post will not be about microservices, Spring or any technology that I've already talked about in <a href="http://toomuchcoding.blogspot.com/">Too much coding blog</a>. This time it will be my opinion on two subjects<br /><ul><li>the more and more frequent "it's not my problem" approach in the IT industry running in a corporation.&nbsp;</li><li>the "business value" frenzy of the management</li></ul>This article is definitely not a motivational one. Quite frankly, you might get depressed after reading it. Nonetheless, it's better to know how really corporate life sometimes looks like rather than get hit in the face.<br /><br />TL;DR : the more you care in a corporate enterprise the worse for you. Eventually some developers will hate your ideas of quality and standards because they are paid to tap the keys. Your management will fire you for not bringing "business value". The faster you embrace it, the better for you - you'll start searching for a new job sooner.<br /><div><br /><div><a name='more'></a>
<!--more-->
</div><h4>Features are not only functionalities</h4><div><br />Let's define some facts: IT is paid by the business. Business wants features. IT has to deliver features to gain money. That's a fact and our reality. Even if you hear from your managers that "cleaning technical debt is a necessity" what they really think is:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s1600/technical_debt.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="224" src="http://4.bp.blogspot.com/-htlLzbCyZro/Vh6fjoKG5iI/AAAAAAABILw/_zk7wkxqPoU/s320/technical_debt.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div></div><div><br /></div><div>And actually that's not bizarre - business has no understanding of the technical aspects of the IT work. Here we can discern two types of business people:<br /><ul><li>they don't get technical aspects, but they trust the engineers</li><li>they don't care about technical aspects and they won't listen to any of the programmers' advice</li></ul><br />If you have the latter business people then most likely you're in this situation:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-LwS3CWbA0b0/Vh6qyT0FmbI/AAAAAAABIMM/1xY8oezZhFk/s1600/before.jpg" /></a></div><br />and actually you should be doing such a shift:<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s1600/cable_change.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="210" src="http://1.bp.blogspot.com/-TCHAm6Q0yT0/Vh6oKJF3mLI/AAAAAAABIMA/pjQoINeQ35c/s320/cable_change.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">http://www.technalytical.com/2012/04/aesthetical-cable-management-before-and.html</td></tr></tbody></table>In order to grow faster. What makes me really surprised that continuously the business picks the first option - just add more mess to the existing one without thinking of the consequences.<br /><br />Now for the tricky part. Now change the word "business" to "developer" and everything is still valid.<br /><br />"Delivering a feature" it's not only coding some functions in whatever language you are using. It's not taking a keyboard and pressing the keys to make the functionality work. If this is your approach then you're a key tapper. Tapping keys to get things done.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s1600/dunno.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="231" src="http://4.bp.blogspot.com/-N9ueTp3dNhI/Vh6sGeO-OUI/AAAAAAABIMY/ZTgNPN9Pras/s320/dunno.jpg" width="320" /></a></div><br /></div><div><br /></div><h4>Programming is more than tapping keys</h4><div><br />I hope that nobody feels offended by this term "key tapper". I'm not trying to be offensive - I'm just describing what I saw in my career. In my opinion there are a couple of different types of IT guys:<br /><br /><ul><li>there are people for whom programming is a passion. They put a lot of energy and effort to make things better</li><li>there are also IT guys for whom programming isn't a passion, but still put (sucessfully) &nbsp;a lot of energy and effort in order to make things better just because they want to be honest and valuable employees (thanks Michal Szostek)</li><li>there are people for whom programming is not a passion and they just come to work and tap the keys&nbsp;</li><li>there are others who would love to do stuff properly but the business is breathing at their necks to do stuff in a bad way because the "deadlines are coming".</li><li>there are positions where people last. They come and simulate work. They lie, talk a lot and delegate work so that there is some impression of progress</li></ul><br />Regardless of the position, if one doesn't focus on quality and just taps in the functionality then:&nbsp;</div><div><ul><li>even if he provides the business feature it might badly influence other people (introducing coupling between modules, breaking encapsulation etc.)</li><li>the functionality might be written in such a way that you will result in the global timeout of the whole system</li><li>you're not thinking about the company standards (<a href="http://www.slideshare.net/MarcinGrzejszczak/4financeit-microservices-092015-kaunas-jug/87?src=clipshare">passing of CorrelationID for instance</a>), that will break the approaches set in the company. This in effect will lead in increased time needed to provide support</li><li>writing the next functionality will take more time than the previous one</li></ul></div><div>Even though it seems to be common knowledge, you can far too often hear something like this:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote>Now imagine that you join a project which is full of such developers and you're asked to fix a bug:<br /><br /><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s1600/new_guy.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="400" src="http://2.bp.blogspot.com/-c6LCeYh8sHs/Vh7A-E-ZjaI/AAAAAAABIM0/gelqAg9YKU0/s400/new_guy.png" width="267" /></a></div><br /><h4>Technical changes are not bringing money</h4><div><br />We have to educate both the business and the developers: writing features and providing business value is actually a sum of a coded and tested functionality with technical advancement. What are those? Code refactoring, introduction of new approaches, migrations from one way of doing things in one way to another. For example:</div><div><ul><li>version control system (e.g. SVN to Git)</li><li>build system (e.g Maven to Gradle)</li><li>UI framework (e.g. Vaadin to AngularJS)</li><li>library versions (e.g. Spring 3.0 to Spring 4.0)</li><li>going from deployment to application servers to embedded servlet containers (e.g. Glassifsh to embedded JAR with Jetty)</li></ul></div><div>Why do we want these changes to happen? Because they ease our work and enforce standards. Why are standards important?<br /><br /><div style="text-align: center;"><i>"Pick a plug they said, it's gonna be easy, they said"</i></div><br /><div class="separator" style="clear: both; text-align: center;"></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s1600/plugs.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="196" src="http://4.bp.blogspot.com/-StjBYB5gZOE/Vh7DWYGKYLI/AAAAAAABINI/7027zJf7kN8/s400/plugs.jpg" width="400" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">https://abdulinnewzealand.wordpress.com/2012/12/03/new-things-from-my-visit-to-new-zeland/</td></tr></tbody></table>If every team in the company uses different:<br /><br /><ul><li>libraries</li><li>approach to testing</li><li>approach to deployment</li><li>approach to running the application</li></ul><br />Then you can tell your business that they will pay A LOT of money for the support. The learning curve will be gigantic for the newcomers. But hey! It's better to code a new functionality in the meantime right?<br /><br />Seemingly all the developers would like to see the effect of those migrations and standardization. Everybody wants this to happen but who should actually do it? When asked about this you might hear:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote><div>How can we solve this?<br /><br /><b>Stupid idea</b><br /><br />Introduce the following flow of working in IT:</div><div><ul><li>the "coding team" writes a business feature and pushes it to master</li><li>the "clean code team" rewrites the code according to the clean code standards</li><li>the "technical team" introduces the technical standards for the written piece of code</li><li>the "migration team" migrates the code from one approach to another</li></ul><div>The outcome of the cooperation could look like this:</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s1600/bathroom.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-8PyO94v8WnQ/Vh7FQYoj_TI/AAAAAAABINU/NfuIHRnzdZQ/s320/bathroom.jpg" width="247" /></a></div><div><br /></div><div><br /></div><div><b>Good idea</b><br /><br />Introduce... caring! Invest a lot of time and effort in educating business and developers that you have to take care of the code quality. Imagine where your company would be if every programmer would focus for 1 hour per day to manage the technical debt. If your managers don't understand the importance of clearing that debt, then you should consider changing jobs cause it's going to get worse with every single push to the repo.<br /><br /></div></div><h4>You are an engineer!</h4><div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s1600/engineer.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-pGZjd5My6EU/Vh7LQrT18oI/AAAAAAABINg/ku5r63yr3oY/s320/engineer.jpg" width="320" /></a></div><br />Developing a feature is not just typing in code that compiles and makes the tests pass. Maybe the constant breathing of the project manager on your neck made you forget about this but you are an engineer. Following <a href="https://en.wikipedia.org/wiki/Engineer">Wikipedia</a>:</div><blockquote class="tr_bq"><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">An&nbsp;</span><b style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">engineer</b><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;is a&nbsp;</span><a href="https://en.wikipedia.org/wiki/Profession" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Profession">professional</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;practitioner of&nbsp;</span><a href="https://en.wikipedia.org/wiki/Engineering" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Engineering">engineering</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">, concerned with applying&nbsp;</span><a class="mw-redirect" href="https://en.wikipedia.org/wiki/Scientific_knowledge" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Scientific knowledge">scientific knowledge</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">,&nbsp;</span><a href="https://en.wikipedia.org/wiki/Mathematics" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Mathematics">mathematics</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">, and&nbsp;</span><a href="https://en.wikipedia.org/wiki/Ingenuity" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Ingenuity">ingenuity</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;to develop solutions for technical, societal and commercial problems. Engineers design materials, structures, and systems while considering the limitations imposed by practicality, regulation, safety, and cost.</span><sup class="reference" id="cite_ref-bls_1-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-bls-1" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[1]</a></sup><sup class="reference" id="cite_ref-nspe_2-0" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-nspe-2" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[2]</a></sup><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;The word&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">engineer</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;is derived from the&nbsp;</span><a href="https://en.wikipedia.org/wiki/Latin" style="background: none rgb(255, 255, 255); color: #0b0080; font-family: sans-serif; font-size: 14px; line-height: 22.4px; text-decoration: none;" title="Latin">Latin</a><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;words&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">ingeniare</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">&nbsp;("to contrive, devise") and&nbsp;</span><i style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">ingenium</i><span style="background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22.4px;">("cleverness").</span><sup class="reference" id="cite_ref-3" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-3" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[3]</a></sup><sup class="reference" id="cite_ref-4" style="background-color: white; color: #252525; font-family: sans-serif; font-size: 11.2px; line-height: 1; unicode-bidi: -webkit-isolate;"><a href="https://en.wikipedia.org/wiki/Engineer#cite_note-4" style="background: none; color: #0b0080; text-decoration: none; white-space: nowrap;">[4]</a></sup></blockquote><div>So other than telling one again:</div><blockquote class="tr_bq">I don't have time for this - it's not my problem. I've delivered my business feature and this is what I'm paid for. What you're referring to is not of my interest.</blockquote><div>you should consider all of the technical aspect before even writing a single line of code. Then you should say:</div><blockquote class="tr_bq">My schedule is tight but I'll fix the issues that you suggested. I understand that delivering business value means writing a feature and making the technical progress as a company. This is what I'm paid for and what you are referring to is part of my duties.&nbsp;</blockquote>Unfortunately there is one problem with this approach...<br /><br /><h4>Are you an engineer that has a say? You're gonna get fired!</h4><br />Yes, if you start caring in a corporate enterprise you will eventually get fired. Business prefers people who nod their heads and agree to everything. After some time quality becomes a burden for the management. It becomes a cost that doesn't bring "business value".<br /><br />So you will start fighting for the quality because this is the very meaning of your programming life. Deliver quality software that satisfies the business requirements, bearing in mind technical consequences. You will defend your developers against the growing pressure from the business to deliver features at a larger pace. The corporate axe will come closer to your neck with every single fight to defend the very meaning of being an engineer.<br /><br />In the meantime your fellow developers that don't agree with your permanent interference in the key tapping due to buzzwords like "resilience", "fail-fast", "latency" or "tests" will continue to dislike you. They will constantly show their lack of support to what you're doing. Their mediocrity and lack of willingness to stand to what they believe in will allow them to remain in the company for years to come.<br /><br />Then one day you will have to pack your stuff in a box and you will be escorted out of the office because you will get fired. The reason will be simple: "not delivering business value".<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s1600/guillotine.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="230" src="http://4.bp.blogspot.com/-baNDD9nKPtQ/Vh7QTfvgBTI/AAAAAAABIN4/p1xdBPOtkrU/s320/guillotine.gif" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">But... don't worry! That's actually good. Someone is doing you a favor! In the long run you will definitely profit from being fired. You will gain respect because you stood for your values. You will be able to stand in the mirror, look at yourself and say that you've done everything your power to do things properly with high quality.</div><div class="separator" style="clear: both; text-align: center;"><br /></div><h4>Epilogue</h4><div class="" style="clear: both; text-align: left;"><br /></div><div class="" style="clear: both; text-align: left;">Hopefully my apocalyptic vision is too harsh but that's what I see when talking to people in the industry. There is a light at the end of the tunnel though (and it's not a freight train).&nbsp;</div><div class="" style="clear: both; text-align: left;">There are companies that value good engineers and value quality. If you get fired (or you're getting close to that) just file a CV there. You can be shocked that the very sense of caring and eagerness to learn drastically boosts your chances of getting hired.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div style="text-align: center;"><a href="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s1600/the_end.gif" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="212" src="http://1.bp.blogspot.com/-oFjV8za2yWM/Vh7M1xlgLRI/AAAAAAABINs/_yxMM4Gp_Vw/s320/the_end.gif" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: left;"><br /></div><h4>Additional reading</h4><div class="" style="clear: both;"><br /><ul><li><a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877">Living in the age of software fuckery</a></li><li><a href="http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/">Don't call yourself a programmer</a></li></ul><br /><br /></div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservice Deployment]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2015/09/27/microservice-deployment/"/>
    <updated>2015-09-27T00:13:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2015/09/27/microservice-deployment</id>
    <content type="html"><![CDATA[<div class='post'>
It's been a while since my last post. In the meantime of course nothing has changed in terms of the microservice hype. I've been &nbsp;attending many microservice's talks and what I'm always missing are concrete details on many different subjects. One of which is deployment. In this post I'll try to depict how in a big, multinational company one would want to do microservice deployment. I'll walk you through the most basic deployment pipeline that could be created in such an enterprise.<br /><br /><a name='more'></a>
<!--more-->
<br /><h4>The goal</h4>Our goal was to:<br /><br /><b>Enforce standards</b><br /><b><br /></b>Have a unique way of deploying alll microservices - we need to enforce standards<br /><br /><b>Tackle the microservice dependencies complexity issue</b><br /><br />Make the deployment process maintainable from the infrastructure and operations perspective<br /><br /><b>Make the pipeline fast and certain</b><br /><br />Have the greatest possible certainty that our features are working fine.<br />We wanted to make the deployment pipeline as fast as possible.<br />It was crucial to add the possibility to automatically rollback if something goes wrong.<br /><br /><h4>Enforce standards</h4>It is crucial that if you're starting with microservices you start introducing standards. Standards of running applications, configuring them (externalized properties) but also you should enforce standards in how you deploy your applications. At some point in time we have seen that different applications do common tasks in different ways.<br /><br />Why should we bother - we have business value to deliver and not waste time on enforcing standards - your manager might say. Actually he is really wrong because you're wasting plenty of time (thus money) on supporting such nonstandard applications. Imagine how much it needs for the new developers to understand how exactly the rules are set in this particular process.<br /><br />The same relates to deployment and deployment pipelines. That's why we decided to enforce one, single way of deploying microservices.<br /><br /><h4><span style="font-weight: normal;">Tackle the microservice dependencies complexity issue</span></h4><br />If you have two monolithic applications talking to each other and not too many developers working on the codebases you can queue deployment of both apps and always perform end to end tests.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-G80VsWKpIy0/VgbyR9nENVI/AAAAAAABII4/rYV8ZIMJi6A/s1600/monolith.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="124" src="https://2.bp.blogspot.com/-G80VsWKpIy0/VgbyR9nENVI/AAAAAAABII4/rYV8ZIMJi6A/s320/monolith.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Two monolithic applications deployed for end to end testing</td></tr></tbody></table><div class="separator" style="clear: both; text-align: left;">In case of microservices the scale starts to be a problem:</div><div class="separator" style="clear: both; text-align: left;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-kggPwWHR-iQ/VgbyhX1x5aI/AAAAAAABIJA/tf2lLkCruxA/s1600/many_microservices.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="207" src="https://2.bp.blogspot.com/-kggPwWHR-iQ/VgbyhX1x5aI/AAAAAAABIJA/tf2lLkCruxA/s320/many_microservices.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Many microservices deployed in different versions</td></tr></tbody></table><div class="separator" style="clear: both; text-align: left;">The questions arise:</div><div class="separator" style="clear: both; text-align: left;"></div><ul><li>Should I queue deployments of microservices on one testing environment or should I have an environment per microservice?&nbsp;</li><ul><li>If I queue deployments people will have to wait for hours to have their tests ran - that can be a problem</li></ul><li>To remove that issue I can have an environment per microservice&nbsp;</li><ul><li>Who will pay the bills (imagine 100 microservices - each having each own environment).&nbsp;</li><li>Who will support each of those environments?</li><li>Should we spawn a new environment each time we execute a new pipeline and then wrap it up or should we have them up and running for the whole day?</li></ul><li>In which versions should I deploy the dependent microservices - development or production versions?</li><ul><li>If I have development versions then I can test my application against a feature that is not yet on production. That can lead to exceptions on production</li><li>If I test against production versions then I'll never be able to test against a feature under development anytime before deployment to production.</li></ul></ul><h4>Make the pipeline fast and certain</h4><div><br /></div><div>Since we really believe in the agile methodology and continuous deployment we would like our features to be delivered to production as fast as possible. When working with the monolithic applications we've faced the following issues:</div><div><ul><li>For monolithic applications we had plenty of unit, integration and end to end tests</li><li>The different types of tests covered the same functionality up to three times</li><li>The tests took a lot of time to run</li></ul><div>Having all of this in mind we wanted not to have such issues with our new deployment pipeline.</div><div><br /></div></div><br /><div class="separator" style="clear: both; text-align: left;"></div><h4>Simplify the infrastructure complexity</h4><div><br /></div><div>Due to technical issues, difficulties to maintain the spawned environments we've decided to simplify the pipeline as much as possible. That's why since we are enthusiasts of TDD and we know what Consumer Driven Contract is we've decided not to do End to End tests. We're deploying our application to a virtual machine where the executed tests don't interfere with other pipelines executed in the very same time.</div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-3BIKN1VzDKA/Vgb7oxk8jXI/AAAAAAABIJQ/q_A0LifBgEI/s1600/stubbed_dependencies.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="203" src="https://3.bp.blogspot.com/-3BIKN1VzDKA/Vgb7oxk8jXI/AAAAAAABIJQ/q_A0LifBgEI/s320/stubbed_dependencies.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Execute tests on a deployed microservice on stubbed dependencies</td></tr></tbody></table><div>That way you can look at your application tests (we called them smoke tests) in the following way:</div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-7jseO68-q6A/Vgb8h7Ia1CI/AAAAAAABIJc/C8W0S4qZAic/s1600/no_e2e_tests.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="303" src="https://3.bp.blogspot.com/-7jseO68-q6A/Vgb8h7Ia1CI/AAAAAAABIJc/C8W0S4qZAic/s320/no_e2e_tests.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">We're testing microservices in isolation</td></tr></tbody></table><div>Why smoke tests? Because we deliberately want to enforce the testing pyramid in the following way:</div><div><ul><li>A lot of unit tests executed during build time</li><li>Some integration tests running on stubs of dependent services executed during build time</li><li>Not many acceptance tests&nbsp;running on stubs of dependent services executed during build time (these can be treated as special case of integration tests)</li><li>A handful of smoke tests executed on a deployed application to see if the app is really packaged properly</li></ul></div><div><br /></div><div>Such an approach to testing and deployment gives the following benefits:</div><div><ul><li>No need to deploy dependent services</li><li>The stubs used for the tests ran on a deployed microservice are the same as those used during integration tests</li><li>Those stubs have been tested against the application that produces them (check <a href="https://github.com/Codearte/accurest">Accurest</a> for more information)</li><li>We don't have many slow tests running on a deployed application - thus the pipeline gets executed much faster</li><li>We don't have to queue deployments - we're testing in isolation thus pipelines don't interfere with each other</li><li>We don't have to spawn virtual machines each time for deployment purposes</li></ul></div><div><br /></div><div>It brings however the following challenges:</div><div><ul><li>No end to end tests before production - you don't have the full certainty that a feature is working</li><li>Due to this certainty that the functionality is working decreases</li><li>First time the applications will talk in a real way will be on production</li></ul></div><h4>Overcoming fear of uncertainty</h4><div><br /></div><div>The argument that we don't know if a functionality is working properly made us invest more time and effort in tools that will give us more information on how our applications work on production. That's why we've added plenty of monitoring both technical and business via Graphite. Also we've introduced Seyren as the alerting mechanism to ping us immediately when something is really wrong on production.</div><div><br /></div><div>Whatever time you spend on improving your tests, testing environments or UATs with endless hours of clicking - it will never signify that on production your application will run in the same manner.</div><div><br /></div><div>Our decisions were related to trade offs. We decided to give away the complexity in the artificial test environments. That complexity was pushed to the monitoring of production instances. With microservices there is never an easy decision - there's always some price needed to pay.</div><div><br /></div><h4>The technical overview of the solution</h4><div><br /></div><div>We've divided the simplest scenario of the microservice deployment pipeline into the following steps.</div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-JmkGUgmrI8Q/Vgb-y9Eg9RI/AAAAAAABIJo/QMa0rkaSfUk/s1600/Microservice%2BPipeline.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="305" src="https://4.bp.blogspot.com/-JmkGUgmrI8Q/Vgb-y9Eg9RI/AAAAAAABIJo/QMa0rkaSfUk/s640/Microservice%2BPipeline.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Microservice deployment pipeline (without A/B testing)</td></tr></tbody></table><div><b><u>Build the app (after commit)</u></b></div><div><br /></div><div>Most preferably we would like after each merge of a PR trigger the deployment pipeline (thus do Continuous Deployment).&nbsp;</div><div><br /></div><div>The result of this step would be to have the application tested in the following ways:</div><div><ul><li>unit and integration tests are ran</li><li>validity of declared stubs specifications is tested against the application itself</li></ul></div><div>Finally what is published to Nexus is the fat-jar of the application together with its stubs.&nbsp;</div><div><br /></div><div><b><u>Deploy to staging</u></b></div><div><br /></div><div>We deploy our freshly built application to the staging environment. <a href="https://github.com/4finance/micro-infra-spring/wiki/Stub-runner">Micro Infra Spring Stub-runner</a> is responsible for downloading the current <b>development</b>&nbsp;versions of stubs of declared dependencies of the microservice.&nbsp;</div><div><br /></div><div>In the first version of the pipeline we've decided to go towards development versions since we would like each of the applications to go live after each commit. That means that there is a high probability that the development version of a stub is in fact the production one. Of course that not necessarily needs to be true - but this is our trade off.</div><div><br /></div><div>In the future versions of the pipeline we would like to test the app against both development and production versions of stubs.&nbsp;</div><div><br /></div><div><b>What is very important to see is that in this step we are upgrading the microservice's DB schema.</b></div><div><b><br /></b></div><div><b><u>Test application rollback scenario</u></b></div><div><br /></div><div>We don't want to rollback the database. If you have MongoDB like databases there is no schema in fact. If you have Liquibase - you can provide the rollback scripts for relational DBs. They however introduce complexity on the DB level.</div><div><br /></div><div>We've decided to go with a trade off that the complexity goes out from the DB level to the code. We're not rolling back the DB but we're rolling back the application. That means that the developers need to write their code to support backwards compatibility.&nbsp;</div><div><br /></div><div><b>That means that the NEW version of the application MUST support the OLD schema of the database. Also developers MUST NOT do backwards incompatible changes in subsequent liquibase scripts.</b></div><div><b><br /></b></div><div>We're running old smoke tests on the rolled back version of the application that is connected to the new version of the schema. That way we can ensure that most probably we will be able to rollback on production without greater issues.</div><div><br /></div><div><b><u>Deploy to production</u></b></div><div><br /></div><div>If the smoke tests have passed and we've checked the rollback procedures we can go live. Here the monitoring part comes in. We need to ensure that we've put all the KPI checking alerts in place. As a part of deployment procedure a review of monitoring and alerts needs to take place.</div><div><br /></div><div>As you can see in the picture the first scenario of live deployment doesn't include 0 downtime approach. That was yet another trade off that we've decided to take. We don't want to tackle the issue of automatic data migration right now. Also for the developers writing code that supports both old and new schema is actually mind blowing. That's why we want to do things a step at a time - for now we kill all the application instances on production, boot one up and &nbsp;change the schema and then boot the rest up too.</div><div><br /></div><br /><div class="separator" style="clear: both; text-align: left;"><b><u>Rollback procedure</u></b></div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">If our KPI monitoring starts to go all red on production then we need to rollback as fast as possible. Since we've tested the rollback procedure it shouldn't be an issue on production to kill all the instances, download the previous version of the app and run it against the new schema.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><h4 style="clear: both; text-align: left;">Summary</h4><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">As everything related to distributed systems - you can see that microservice deployment is not easy. Actually it's full of trade offs and complexity. Starting from the infrastructure going through testing and finishing with database schema changes.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><div class="separator" style="clear: both; text-align: left;">The presented solution seems to be an acceptable compromise between time, effort, certainty and feedback.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Speed Up Your Gradle Build From 90 to 8 Minutes]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2015/02/08/how-to-speed-up-your-gradle-build-from/"/>
    <updated>2015-02-08T19:24:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2015/02/08/how-to-speed-up-your-gradle-build-from</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="background-color: white; box-sizing: border-box; color: #262626; font-family: Georgia, serif; font-size: 19px; line-height: 27.55px;">Even though I was supposed to write a series of blog posts about&nbsp;<a href="http://toomuchcoding.blogspot.com/search/label/micro-infra-spring" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">micro-infra-spring</a>&nbsp;here at&nbsp;<a href="http://toomuchcoding.blogspot.com/" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Too Much Coding blog</a>, today I'll write about how we've managed to decrease our biggest project's build time from 90 to 8 minutes!<br /><br /><a name='more'></a>
<!--more-->
  <br style="box-sizing: border-box;" /><br /><br style="box-sizing: border-box;" />At one of the companies that I've been working we've faced a big problem related to pull request build times. We have one monolithic application that we are in progress of slicing into microservices but still until this process is finished we have to build that big app for each PR. We needed to change things to have really fast feedback from our build so that pull request builds don't get queued up endlessly in our CI. You can only imagine the frustration of developers who can't have their branches merged to master because of the waiting time.<br /><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Structure</strong></div>In that project we have over 200 Gradle modules and over a dozen big projects (countries) from which we can build some (really fat) fat-jars. We have also a core module that if we change then we would have to rebuild all the big projects to check if they weren't affected by the modifications. There are a few old countries that are using GWT compilers and we have some JS tasks executed too.<br /><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Initial stats</strong></div>Before we started to work on optimization of the process the whole application (all the countries) was built in about 1h 30 minutes.<br /><br style="box-sizing: border-box;" /><i style="box-sizing: border-box;">Current build time: ~90 minutes.</i></div><div style="background-color: white; box-sizing: border-box; color: #262626; font-family: Georgia, serif; font-size: 19px; line-height: 27.55px;"><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Profile your build</strong></div>First thing that we've done was to run the build with the&nbsp;--profile&nbsp;switch.<br /><br style="box-sizing: border-box;" />That way Gradle created awesome stats for our build. If you are doing any sort of optimization then it's crucial to gather measurements and statistics. Check out this&nbsp;<a href="https://gradle.org/docs/current/userguide/tutorial_gradle_command_line.html#sec:profiling_build" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Gradle page about profiling your build&nbsp;</a>for more info on that switch and features.</div><div style="background-color: white; box-sizing: border-box; color: #262626; font-family: Georgia, serif; font-size: 19px; line-height: 27.55px;"><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Exclude long running tasks in dev mode</strong></div><div style="box-sizing: border-box;"><span data-fr-verified="true" style="background-color: initial; box-sizing: border-box;"><span data-fr-verified="true" style="box-sizing: border-box; line-height: 1.45em;"><span data-fr-verified="true" style="box-sizing: border-box; font-size: 15px;"><span data-fr-verified="true" style="box-sizing: border-box; font-family: &quot;arial&quot; , &quot;helvetica&quot; , &quot;verdana&quot; , &quot;tahoma&quot; , sans-serif;">It turned out that we are spending a lot of time on JS minification and on GWT compilation. That's why we have added a custom property&nbsp;-PdevMode&nbsp;to disable some long running tasks in dev mode build. Those tasks were:</span></span></span></span></div><br style="box-sizing: border-box;" /><ul style="box-sizing: border-box; margin-bottom: 10px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">excluded JS minification</li><ul style="box-sizing: border-box; margin-bottom: 0px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">benefit: 13 countries * ~60 secs * at least 2 modules where minification occurred ~ 26 minutes</li></ul><li style="box-sizing: border-box; padding: 0px 0px 8px;">optimized GWT compilation:&nbsp;</li><ul style="box-sizing: border-box; margin-bottom: 0px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">have permutations done for only 1 browser (by default it's done for multiple browsers)</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">disable optimization of the compilation (-optimize 0)</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">add the -draftCompile switch to to compile quickly with minimal optimizations</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">benefit: about 2 minutes less on GWT compilation * sth like 5 projects with GWT ~ 10 minutes</li></ul></ul><i style="box-sizing: border-box;">Overall gain: ~ 40 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~50 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Check out your tests</strong></div>Together with the one and only&nbsp;<a href="http://github.com/achudzik" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Adam Chudzik</a>&nbsp;we have started to write our own&nbsp;<a href="https://github.com/marcingrzejszczak/gradle-test-profiler" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Gradle Test Profiler</a>&nbsp;(it's a super beta version ;) ) that created a single CSV with sorted tests by their execution time. We needed quick and easy gains without endless test refactoring and it turned out that it's really simple. One of our tests took 50 seconds to execute and it was testing a feature that has and will never be turned on on production. Of course there were plenty of other tests that we should take a look into (we'd have to look for test duplication, check out the test setup etc.) but it would involve more time, help of a QA and we needed quick gains.<br /><br style="box-sizing: border-box;" />Benefit: By simple disabling this test we gained about 1 minute.<br /><i style="box-sizing: border-box;">Overall gain: ~ 41 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~49 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Turn on the --parallel Gradle flag at least for the compilation</strong></div>Even though at this point our gains were more or less 40 minutes it was still unacceptable for us to wait 40 minutes for the pull request to be built.<br /><br style="box-sizing: border-box;" />That's why we decided to go parallel! Let's build the projects (over 200) in parallel and we'll gain a lot of time on that. When you execute the Gradle build with the --parallel flag Gradle calculates how many threads can be used to concurrently build the modules. For more info go to the&nbsp;<a href="https://gradle.org/docs/current/userguide/multi_project_builds.html#sec:parallel_execution" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Gradle's documentation on parallel project execution</a>.<br /><br style="box-sizing: border-box;" />It's an incubating feature so wen we started to get&nbsp;BindExceptions&nbsp;on port allocation we initially thought that most likely it's Gradle's fault. Then we had a chat with&nbsp;<a href="https://twitter.com/szczepiq" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">Szczepan Faber</a>who worked for Gradleware and it turns out that the feature is actually really mature (thx Szczepan for the help BTW :) ).<br /><br style="box-sizing: border-box;" />We needed quick gains so instead of fixing the port binding stuff we decided only to compile everything in parallel and then run tests sequentially.</div><div style="box-sizing: border-box;"><br />Benefit: By doing this lame looking hack we gained ~4 mintues (on my 8 core laptop).<br /><i style="box-sizing: border-box;">Overall gain: ~ 45 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~45 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Don't be a jerk - just prepare your tests for parallelization</strong></div>This command seemed so lame that we couldn't even look at it. That's why we said - let's not be jerks and just fix the port issues.<br /><br style="box-sizing: border-box;" />So we went through the code, randomized all the fixed ports, patched&nbsp;<a href="http://github.com/4finance/micro-infra-spring" style="background: transparent; box-sizing: border-box; color: black; cursor: pointer; text-decoration: none;">micro-infra-spring</a>&nbsp;so it does the same upon Wiremock and Zookeeper instantiation and just ran the building of the project like this:<br /><br style="box-sizing: border-box;" />We were sure that this is the killer feature that we were lacking and we're going to win the lottery. Much to our surprise the result was really disappointing.<br /><br style="box-sizing: border-box;" />Benefit: Concurrent project build decreased the time by ~5 minutes.<br /><i style="box-sizing: border-box;">Overall gain: ~ 50 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~40 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Check out your project structure</strong></div>You can only imagine the number of WTFs that were there in our office. How on earth is that possible?<br /><br style="box-sizing: border-box;" />We've opened up&nbsp;htop,&nbsp;iotop&nbsp;and all the possible tools including&nbsp;vmstat&nbsp; to see what the hell was going on. It turned out that context switching is at an acceptable level whereas at some point of the build only part of the cores are used as if sth was executed sequentially!<br /><br style="box-sizing: border-box;" />The answer to that mystery was pretty simple. We had a wrong project structure.<br /><br style="box-sizing: border-box;" />We had a module that ended up as a test-jar in&nbsp;testCompile&nbsp;dependency of other projects. That means that the vast majority of modules where waiting for this project to be built. Built means compiled and tested. It turned out that this test-jar module had also plenty of slow integration tests in it so only after those tests were executed could other modules be actually built!<br /><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Simple source moving can drastically increase your speed</strong></div>By simply moving those slow tests to a separate module we've unblocked the build of all modules that were previously waiting.<br /><br style="box-sizing: border-box;" />Now we could do further optimization - we've split the slow integration tests into two modules to make all the modules in the whole project be built in more or less equal time (around 3,5 minutes).<br />.<br />Benefit: Fixing the project structure decreased the time by ~10 minutes<br /><i style="box-sizing: border-box;">Overall gain: ~ 60 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~30 minutes.</em></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Don't save on machine power</strong></div><div style="box-sizing: border-box;"><span data-fr-verified="true" style="background-color: initial; box-sizing: border-box;"><span data-fr-verified="true" style="box-sizing: border-box; line-height: 1.45em;"><span data-fr-verified="true" style="box-sizing: border-box; font-size: 15px;"><span data-fr-verified="true" style="box-sizing: border-box; font-family: &quot;arial&quot; , &quot;helvetica&quot; , &quot;verdana&quot; , &quot;tahoma&quot; , sans-serif;">We've invested in some big AWS instance with 32 cores and 60 gb of RAM to really profit from the parallel build's possibilities. We're paying about 1.68$ per one hour of such machine's (c3.8xlarge) working time.</span></span></span></span></div><br style="box-sizing: border-box;" />If someone form the management tells you that that machine costs a lot of money and the company can't afford it you can actually do a fast calculation. You can ask this manager what is more expensive - paying for the machine or paying the developer for 77 minutes * number of builds of waiting?<br /><br style="box-sizing: border-box;" />Benefit: Paying for a really good machine on AWS decreased the build time by ~22 minutes<br /><i style="box-sizing: border-box;">Overall gain: ~ 82 minutes.</i><br /><div style="box-sizing: border-box;"><em style="box-sizing: border-box;">Current build time: ~8 minutes.</em></div><div style="box-sizing: border-box;"><br style="box-sizing: border-box;" /></div><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">What else can we do?</strong></div>Is that it? Can we decrease the time further on? Sure we can!<br /><br style="box-sizing: border-box;" />Possible solutions are:<br /><br style="box-sizing: border-box;" /><ul style="box-sizing: border-box; margin-bottom: 10px; margin-top: 0px; padding-left: 25px;"><li style="box-sizing: border-box; padding: 0px 0px 8px;">Go through all of the tests and check why some of them take so long to run</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">Go through the integration tests and check if don't duplicate the logic - we will remove them</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">We're using Liquibase for schema versioning and we haven't merged the changests for some time thus sth like 100 changesets are executed each time we boot up Spring context (it takes more or less 30 seconds)</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">We could limit the Spring context scope for different parts of our applications so that Spring boots up faster</li><li style="box-sizing: border-box; padding: 0px 0px 8px;">Buy a more powerful machine ;)</li></ul><div style="box-sizing: border-box;">There is also another, better way ;)</div><div style="box-sizing: border-box;">SPLIT THE MONOLITH INTO MICROSERVICES AND GO TO PRODUCTION IN 5 MINUTES ;)</div><br style="box-sizing: border-box;" /><div style="box-sizing: border-box; margin-bottom: 15px; margin-top: 5px;"><strong style="box-sizing: border-box;">Summary</strong></div>Hopefully I've managed to show you how you can really speed up your build process. The work to be done is difficult, sometimes really frustrating but as you can see very fruitful.</div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spock Subject Collaborators Extension 1.0.1 Released!]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/12/17/spock-subject-collaborators-extension/"/>
    <updated>2014-12-17T23:28:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/12/17/spock-subject-collaborators-extension</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />I'm really happy to say that I've just released a new version 1.0.1 of the <a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension">Spock Subject Collaborators Extension</a>.<br /><br />The changelog is as follows:<br /><br /><a name='more'></a><br />
<!--more-->
<h2 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.75em; line-height: 1.225; margin-bottom: 16px; margin-top: 0px !important; padding-bottom: 0.3em; position: relative;"><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/tree/1.0.1" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">1.0.1</a></h2><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Bug fixes:</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/issues/3" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">#3</a>&nbsp;Make plugin compatible with Spock 1.0.0-SNAPSHOT</div><h2 style="border-bottom-color: rgb(238, 238, 238); border-bottom-style: solid; border-bottom-width: 1px; box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.75em; line-height: 1.225; margin-bottom: 16px; margin-top: 1em; padding-bottom: 0.3em; position: relative;"><a aria-hidden="true" class="anchor" href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/blob/master/CHANGELOG.md#100" id="user-content-100" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; bottom: 0px; box-sizing: border-box; color: #4183c4; display: block; left: 0px; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"></a><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/tree/1.0.0" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">1.0.0</a></h2><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">New features:</div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;"><a href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/issues/1" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; box-sizing: border-box; color: #4183c4; text-decoration: none;">#1</a>&nbsp;Inject superclass fields - now you can inject fields to your superclass</div><br />As you can see now you'll be able to use this extension together with Spock in version 1.0.0 (assuming that nothing will change until then).<br /><br /><h2>How to get it?</h2><h3 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.5em; line-height: 1.43; margin-bottom: 16px; margin-top: 1em; position: relative;">For Maven:</h3><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add JCenter repository:</div><div class="highlight highlight-xml" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;">&lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repositories</span>&gt;<br />    &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repository</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">snapshots</span>&gt;<br />            &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">enabled</span>&gt;false&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">enabled</span>&gt;<br />        &lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">snapshots</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">id</span>&gt;central&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">id</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">name</span>&gt;bintray&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">name</span>&gt;<br />        &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">url</span>&gt;http://jcenter.bintray.com&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">url</span>&gt;<br />    &lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repository</span>&gt;<br />&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">repositories</span>&gt;</pre></div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add dependency:</div><div class="highlight highlight-xml" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;">&lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">dependency</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">groupId</span>&gt;com.blogspot.toomuchcoding&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">groupId</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">artifactId</span>&gt;spock-subjects-collaborators-extension&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">artifactId</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">version</span>&gt;1.0.1&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">version</span>&gt;<br />      &lt;<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">scope</span>&gt;test&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">scope</span>&gt;<br />&lt;/<span class="pl-ent" style="box-sizing: border-box; color: #63a35c;">dependency</span>&gt;</pre></div><h3 style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 1.5em; line-height: 1.43; margin-bottom: 16px; margin-top: 1em; position: relative;"><a aria-hidden="true" class="anchor" href="https://github.com/marcingrzejszczak/spock-subjects-collaborators-extension/blob/master/README.md#for-gradle" id="user-content-for-gradle" style="background-attachment: initial; background-clip: initial; background-image: initial; background-origin: initial; background-position: initial; background-repeat: initial; background-size: initial; bottom: 0px; box-sizing: border-box; color: #4183c4; display: block; left: 0px; margin-left: -30px; padding-left: 30px; padding-right: 6px; position: absolute; text-decoration: none; top: 0px;"></a>For Gradle:</h3><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add JCenter repository:</div><div class="highlight highlight-gradle" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"><span class="pl-en" style="box-sizing: border-box; color: #795da3;">repositories</span> {<br />    jcenter()<br />}</pre></div><div style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;">Add dependency:</div><div class="highlight highlight-gradle" style="box-sizing: border-box; color: #333333; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 16px;"><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"><span class="pl-en" style="box-sizing: border-box; color: #795da3;">dependencies</span> {<br />    testCompile <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">'</span>com.blogspot.toomuchcoding:spock-subjects-collaborators-extension:1.0.1<span class="pl-pds" style="box-sizing: border-box;">'</span></span><br />}</pre></div><br /><h2>How to use it?</h2><div>Below you have an example of usage:</div><div><br /></div><div><pre style="background-color: #f7f7f7; border-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-break: normal; word-wrap: normal;"><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">package</span> <span class="pl-smp" style="box-sizing: border-box;">com.blogspot.toomuchcoding.spock.subjcollabs</span><br /><br /><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">import</span> <span class="pl-smi" style="box-sizing: border-box;">spock.lang.Specification</span><br /><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">import</span> <span class="pl-smi" style="box-sizing: border-box;">com.blogspot.toomuchcoding.spock.subjcollabs.Collaborator</span><br /><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">import</span> <span class="pl-smi" style="box-sizing: border-box;">com.blogspot.toomuchcoding.spock.subjcollabs.Subject</span><br /><br /><span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">class</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">ConstructorInjectionSpec</span> <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">extends</span> <span class="pl-e" style="box-sizing: border-box; color: #795da3;">Specification</span> {<br /><br />    <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">public</span> <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">static</span> <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">final</span> <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">String</span> <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">TEST_METHOD_1</span> <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">"</span>Test method 1<span class="pl-pds" style="box-sizing: border-box;">"</span></span><br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> someOtherClassNotToBeInjected <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">Mock</span>()<br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">@Collaborator</span><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> someOtherClass <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">Mock</span>()<br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">@Subject</span><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeClass</span> systemUnderTest<br /><br />    <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">def</span> <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">"</span>should inject collaborator into subject<span class="pl-pds" style="box-sizing: border-box;">"</span></span>() {<br />        <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">given</span>:<br />            someOtherClass<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someMethod() <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">&gt;&gt;</span> <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">TEST_METHOD_1</span><br /><br />        <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">when</span>:<br />            <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">String</span> firstResult <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> systemUnderTest<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someOtherClass<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someMethod()<br /><br />        <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">then</span>:<br />            firstResult <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">==</span> <span class="pl-c1" style="box-sizing: border-box; color: #0086b3;">TEST_METHOD_1</span><br />            systemUnderTest<span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someOtherClass <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">==</span> someOtherClass<br />    }<br /><br /><br />    <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">class</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">SomeClass</span> {<br />        <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> someOtherClass<br /><br />        <span class="pl-en" style="box-sizing: border-box; color: #795da3;">SomeClass</span>(<span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">SomeOtherClass</span> <span class="pl-v" style="box-sizing: border-box; color: #df5000;">someOtherClass</span>) {<br />            <span class="pl-v" style="box-sizing: border-box; color: #df5000;">this</span><span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">.</span>someOtherClass <span class="pl-k" style="box-sizing: border-box; color: #a71d5d;">=</span> someOtherClass<br />        }<br />    }<br /><br />    <span class="pl-s" style="box-sizing: border-box; color: #a71d5d;">class</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">SomeOtherClass</span> {<br />        <span class="pl-st" style="box-sizing: border-box; color: #a71d5d;">String</span> <span class="pl-en" style="box-sizing: border-box; color: #795da3;">someMethod</span>() {<br />            <span class="pl-s1" style="box-sizing: border-box; color: #df5000;"><span class="pl-pds" style="box-sizing: border-box;">"</span>Some other class<span class="pl-pds" style="box-sizing: border-box;">"</span></span><br />        }<br />    }<br /><br />}</pre></div><h2>Disclaimer</h2>Remember that if you're using this extension as a way to hack your way through an awful design of your application then you should do your best to fix your code in the first place! You've been warned ;)</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Personal Website]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/10/27/new-personal-website/"/>
    <updated>2014-10-27T22:39:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/10/27/new-personal-website</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />I've just changed my website so feel free to check it out :) <a href="http://www.marcin.grzejszczak.pl/">http://www.marcin.grzejszczak.pl/</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito Cookbook Is Out!!]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/06/25/mockito-cookbook-is-out/"/>
    <updated>2014-06-25T19:34:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/06/25/mockito-cookbook-is-out</id>
    <content type="html"><![CDATA[<div class='post'>
<br />I'm very pleased to announce that you can order my new book<a href="https://www.packtpub.com/mockito-cookbook/book"> Mockito Cookbook</a> here <a href="https://www.packtpub.com/mockito-cookbook/book">https://www.packtpub.com/mockito-cookbook/book</a> . I hope that you will enjoy it :)</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pre-order Mockito Cookbook!!]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/06/12/pre-order-mockito-cookbook/"/>
    <updated>2014-06-12T23:15:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/06/12/pre-order-mockito-cookbook</id>
    <content type="html"><![CDATA[<div class='post'>
<br />Hi!<br /><br />I'm pleased to announce that you can already pre-order my new book <a href="https://www.packtpub.com/mockito-cookbook/book">Mockito Cookbook</a>. You can buy it on <a href="https://www.packtpub.com/mockito-cookbook/book">Packt Publishing's website</a>. The whole code from the book + plenty of extras are available at <a href="https://github.com/marcingrzejszczak/mockito-cookbook">Github over here</a>. Enjoy :)</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito Instant Code Repo at Github]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/06/04/mockito-instant-code-repo-at-github/"/>
    <updated>2014-06-04T20:57:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/06/04/mockito-instant-code-repo-at-github</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />Since I was asked for the code to the<a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book"> "Mockito Instant"</a> book a couple of times I decided to place it on Github. Here is the link - <a href="https://github.com/marcingrzejszczak/mockito-instant">https://github.com/marcingrzejszczak/mockito-instant</a>. Enjoy :)</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy Builder AST Merged to Groovy Core!]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/04/24/groovy-builder-ast-merged-to-groovy-core/"/>
    <updated>2014-04-24T17:34:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/04/24/groovy-builder-ast-merged-to-groovy-core</id>
    <content type="html"><![CDATA[<div class='post'>
<p dir=ltr>Hi! </p><p dir=ltr>Today it turned out that Paul King merged the Builder AST transform that based on my <a href="https://github.com/groovy/groovy-core/pull/341">PojoBuilder</a> to core of Groovy. So you will be able to use it when the new version of Groovy gets released.</p><p dir=ltr>You can take a look at the code here</p><p dir=ltr><a href="https://github.com/groovy/groovy-core/pull/389">https://github.com/groovy/groovy-core/pull/389</a></p><p dir=ltr>Many thanks go to <a href="http://solidsoft.wordpress.com"><b>Marcin Zaj&#261;czkowski</b></a> for his code review to the initial version.</p><p dir=ltr>It's not the biggest features in the world but anyway, enjoy :)</p></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Warsaw Groovy User Group Talk - AST Transformations]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/03/21/warsaw-groovy-user-group-talk-ast/"/>
    <updated>2014-03-21T09:19:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/03/21/warsaw-groovy-user-group-talk-ast</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br /><a href="http://www.youtube.com/watch?v=JdSCDEkX0Tw">Click here to go to the on-air hangout (in PL) regarding AST Transformations from my yesterday's presentation on Warsaw Groovy User Group</a></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Warsaw Groovy User Group Talk]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/02/19/warsaw-groovy-user-group-talk/"/>
    <updated>2014-02-19T23:39:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/02/19/warsaw-groovy-user-group-talk</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />Since tomorrow I'm giving a talk on XML transformations in Groovy I'd like to publish the code that will be presented during the presentation. Check out the <a href="https://github.com/marcingrzejszczak/groovy-xml">Github repo</a>&nbsp;and the <a href="https://bitbucket.org/gregorin1987/groovy-xml">Bitbucket repository</a>.<br /><br />The presentation (in polish) can be found on <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=MGu0HHzROxA#t=2109">youtube</a>.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Groovy Runtime Metaprogramming and AST Transforms]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2014/02/04/introduction-to-groovy-runtime/"/>
    <updated>2014-02-04T23:50:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2014/02/04/introduction-to-groovy-runtime</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />I'm very happy to share my presentation regarding <b><i>Groovy metaprogramming and AST transforms</i></b>. The slides are available at <a href="http://www.slideshare.net/MarcinGrzejszczak/introduction-to-groovy-runtime-metaprogramming-and-ast-transforms">SlideShare</a>&nbsp;and the code is available at <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/e5ab7c69ab7b2796075fd6f087fbf31346aa2d2b/Groovy/ast/?at=default">TooMuchCoding Bitbucket</a>&nbsp;and <a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Groovy/ast">TooMuchCoding Github</a> repositories. If you have any problems with reading any part of the slides or sth just post a comment here and I'll tr to help you :)<br /><br />Enjoy!<br /><br /><br /><a name='more'></a>
<!--more-->
<br /><iframe allowfullscreen="" frameborder="0" height="356" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/30820561" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px; max-width: 100%;" width="427"> </iframe> <br /><div style="margin-bottom: 5px;"><strong> <a href="https://www.slideshare.net/MarcinGrzejszczak/introduction-to-groovy-runtime-metaprogramming-and-ast-transforms" target="_blank" title="Introduction to Groovy runtime metaprogramming and AST transforms">Introduction to Groovy runtime metaprogramming and AST transforms</a> </strong> from <strong><a href="http://www.slideshare.net/MarcinGrzejszczak" target="_blank">Marcin Grzejszczak</a></strong> <br /><br />I had a discussion with one of the readers regarding issues related to creating an AST transformation that would be used on classes (and not on scripts). Often you can see that such a transformation does not work for you even though it should. The problem might be that you have the AST transformation compiled in the same time toghether with the class that you annotated with AST transformation related annotation.<br /><br />What you have to remember about is that your AST transformation related classes have to be compiled prior to using (that's why you can often find that your AST transformation is working when you right click on your annotated class in your IDE (or Groovy console) and manually compile that particular class. That's because you compile that particular class when other classes have already been compiled. That's the very same scenario as with compiling a script that is using an AST transformation - first your tranformations are compiled and afterwards at runtime the script gets compiled.<br /><br />Please check the additional repository <a href="https://github.com/marcingrzejszczak/ast_examples">ast_examples</a> that consists of the same examples as in the <a href="https://github.com/marcingrzejszczak/too-much-coding">TooMuchCoding </a>repository together with an additional AST transformation that is set on a class.</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of the Instant Mock Testing With PowerMock]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2013/12/16/review-of-instant-mock-testing-with/"/>
    <updated>2013-12-16T23:47:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2013/12/16/review-of-instant-mock-testing-with</id>
    <content type="html"><![CDATA[<div class='post'>
Hi!<br /><br />Quite recently I was asked by Packt publishing to write a review of the book <a href="http://bit.ly/181GmFv">Instant Mock Testing with PowerMock</a> by&nbsp;Deep Shah. I have just managed to go through it and would like to share my thoughts :)<br /><br /><a name='more'></a>
<!--more-->
<h2>The layout</h2><br />I enjoyed the book's layout with clear separation of the discussed issues with level of expertise required for the given section. What was also really nice was the precise division of content into the introductory part and the concrete solution to the problem.<br /><h2>What I liked</h2><br /><ul><li>PowerMock is a very powerful tool that allows to test legacy code that was very badly written. On the other hand it can be tempting not to refactor existing code or even write bad code from the very beginning. So after this long introduction what I liked was that the author emphasised at the beginning of some chapters how a proper design should look like and that PowerMock breaks the rule</li><li>Names of test methods in the shown examples - they are very clear and teach good practices</li><li>Important parts of code are shown in bold - it attracts the reader and makes him focus immediately on the crucial elements</li><li>The examples clearly present the solution to the given problem</li><li>That I could learn about the PowerMock's <i>suppress</i> functionality :)</li><li>I had all the important PowerMock features in one place written in a concise and readable manner</li><li>Very thorough explanations for beginners in terms of adding PowerMock to Eclipse or IntelliJ</li><li>Introductory sections of each recipie (for example introducing the Active Record pattern)</li></ul><h2>What I didn't like</h2><div><ul><li>It's a very subjective opinion but I definitely prefer creating assertions through <span style="font-family: Courier New, Courier, monospace;">assertThat</span> methods with proper matchers instead of using <span style="font-family: Courier New, Courier, monospace;">assertEquals</span>, <span style="font-family: Courier New, Courier, monospace;">assertNull</span> etc.</li><li>Not sure if that many javadocs were needed in the examples - for me they blur the image</li><li>On one hand the tests seem clean but on the other there are test scenarios in which the implementation is being tested instead of behaviour (for example in stubbing/verifying private methods or in partial mocking with spies). Of course I understand that sometimes it's done if we really care about some method execution or for the sake of showing PowerMock capabilities but in some cases&nbsp;(e.g. Partial mocking with spies)&nbsp;the refactoring process is not clear to me.</li></ul><h2>Summary</h2></div><div>I really enjoyed the book&nbsp;<a href="http://www.packtpub.com/mock-testing-with-powermock/book">Instant Mock Testing with PowerMock</a>&nbsp;by&nbsp;Deep Shah because I like books related to computer science :) I'm pretty sure that someone that reads it will know about all the important PowerMock's features - Deep Shah did a good job here. I would however recommend that one reads the PowerMock's documentation first, especially the <a href="https://code.google.com/p/powermock/wiki/Motivation">when to use it part</a>&nbsp;since as authors state it:</div><blockquote class="tr_bq"><span style="background-color: white; font-family: arial, sans-serif; font-size: 13px; line-height: 16.390625px;">... PowerMock is mainly intended for people with expert knowledge in unit testing. Putting it in the hands of junior developers may cause more harm than good.</span></blockquote><div>Also there is good tutorial&nbsp;<a href="http://www.jayway.com/2013/03/05/beyond-mocking-with-powermock/">recommended by the PowerMock's authors</a>&nbsp;and if you are a Mockito user you can profit from the <a href="https://code.google.com/p/powermock/wiki/MockitoUsage13">Mockito usage at the project's wiki</a>&nbsp;(although the examples there are not that specific as in Deep Shah's book).</div><div><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring's @Primary Annotation in Action]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2013/12/12/springs-primary-annotation-in-action/"/>
    <updated>2013-12-12T09:00:00+01:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2013/12/12/springs-primary-annotation-in-action</id>
    <content type="html"><![CDATA[<div class='post'>
<br />Spring is a framework that never stops to amaze me. It's because of the fact that it offers plenty of different solutions that allow us, developers, to complete our tasks without writing millions of lines of code. Instead we are able to do the same in a much more readable, standardized manner. In this post I will try to describe one of its features that most likely is well known to all of you but in my opinion its importance is undervalued. The feature that I'll be talking about is the <span style="font-family: Courier New, Courier, monospace;"><a href="http://docs.spring.io/spring/docs/3.2.5.RELEASE/javadoc-api/org/springframework/context/annotation/Primary.html">@Primary</a></span> annotation.<br />
<!--more-->
<br /><a name='more'></a><br /><br /><h2>The problem</h2>On a couple of projects that I was working on we have come accross a common business problem - we had a point of entry to a more complex logic - some container, that would gather the results of several other processors into a single output (something like map-filter-reduce functions from the functional programming). To some extent it resembled the <a href="http://en.wikipedia.org/wiki/Composite_pattern">Composite</a> pattern. Putting it all together our approach was as follows:<br /><ol><li>We had a container that had an autowired list of processors implementing a common interface</li><li>Our container implemented the same interface as the elements of the autowired list</li><li>We wanted the client class that would use the container to have this whole processing work transparent - he is interesed only in the result</li><li>The processors have some logic (predicate) basing on which a processor is applicable to the current set of input data</li><li>The results of the processing were then combined into a list and then reduced to a single output</li></ol><div>There are numerous ways of dealing with this issue - I'll present one that uses Spring with the <span style="font-family: Courier New, Courier, monospace;">@Primary</span> annotation.</div><h2>The solution</h2>Let's start with defining how our use case will fit to the aforementioned preconditions. Our set of data is a Person class that looks as follows:<br /><br /><b>Person.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.person.domain;<br /><br />public final class Person {<br /> private final String name;<br /> private final int age;<br /> private final boolean stupid;<br /><br /> public Person(String name, int age, boolean stupid) {<br />  this.name = name;<br />  this.age = age;<br />  this.stupid = stupid;<br /> }<br /><br /> public String getName() {<br />  return name;<br /> }<br /><br /> public int getAge() {<br />  return age;<br /> }<br /><br /> public boolean isStupid() {<br />  return stupid;<br /> }<br />}<br /><br /></pre>Nothing out of the ordinary. Now let us define the contract:<br /><br /><b>PersonProcessingService.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.person.service;<br /><br />import com.blogspot.toomuchcoding.person.domain.Person;<br /><br />public interface PersonProcessingService {<br /> boolean isApplicableFor(Person person);<br /> String process(Person person);<br />}<br /></pre><br />As stated in the preconditions each implementaiton of the PersonProcessingService has to define two points of the contract :<br /><br /><ol><li>whether it is applicable for the current Person&nbsp;</li><li>how it processess a Person.</li></ol><br />Now let's take a look at some of the Processors that we have - I'll not post the code here cause it's pointless - you can check out the code later on <a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Spring/Primary">Github</a> or on <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/6c9b91a33f7d40032ff7c650d17bf60bd8c34625/Spring/Primary/?at=default">Bitbucket</a>. We have the following @Component annotated implementations of PersonProcessingService:<br /><ul><li>AgePersonProcessingService</li><ul><li>is applicable if Person's age is greater or equal 18</li><li>returns a String containing "AGE" as processing takes place - that's kind of silly but it's just a demo right? :)</li></ul><li>IntelligencePersonProcessingService</li><ul><li>is applicable if a Person is stupid</li><li>returns a String containing "STUPID" as processing takes place</li></ul><li>NamePersonProcessingService</li><ul><li>is applicable if a Person has a name</li><li>returns a String containing "NAME" as processing takes place</li></ul></ul><div>The logic is fairly simple. Now our container of PersonProcessingServices would want to iterate for a given Person over the processors, check if the current processor is applicable (filter) and if that is the case add the String that is a result of processing of a Person to the list of responses (map - a function converting a Person to a String) and finaly join those responses by a comma (reduce). Let's check it out how it's done:<br /><br /><b>PersonProcessingServiceContainer.java</b></div><div><br /><pre class="brush:java">package com.blogspot.toomuchcoding.person.service;<br /><br />import java.util.ArrayList;<br />import java.util.List;<br /><br />import org.apache.commons.lang.StringUtils;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.beans.factory.annotation.Autowired;<br />import org.springframework.context.annotation.Primary;<br />import org.springframework.stereotype.Component;<br /><br />import com.blogspot.toomuchcoding.person.domain.Person;<br /><br />@Component<br />@Primary<br />class PersonProcessingServiceContainer implements PersonProcessingService {<br /><br /> private static final Logger LOGGER = LoggerFactory.getLogger(PersonProcessingServiceContainer.class);<br /> <br /> @Autowired<br /> private List&lt;PersonProcessingService&gt; personProcessingServices = new ArrayList&lt;PersonProcessingService&gt;();<br /> <br /> @Override<br /> public boolean isApplicableFor(Person person) {<br />  return person != null;<br /> }<br /><br /> @Override<br /> public String process(Person person) {<br />  List&lt;String&gt; output = new ArrayList&lt;String&gt;();<br />  for(PersonProcessingService personProcessingService : personProcessingServices){<br />   if(personProcessingService.isApplicableFor(person)){<br />    output.add(personProcessingService.process(person));<br />   }<br />  }<br />  String result = StringUtils.join(output, ",");<br />  LOGGER.info(result);<br />  return result;<br /> }<br /><br /> public List&lt;PersonProcessingService&gt; getPersonProcessingServices() {<br />  return personProcessingServices;<br /> }<br />}<br /><br /><br /></pre>As you can see we have a container that is annotated with @Primary which means that if an implementation of the PersonProcessingService will have to be injected then Spring will pick the PersonProcessingServiceContainer to be injected. The cool thing is that we have an autowired list of PersonProcessingServices which means that all other implementations of that interface will get autowired there (the container will not autowire itself to the list!).<br /><br />Now let's check out the <a href="https://code.google.com/p/spock/">Spock tests</a> that prove that I'm not telling any lies. If you aren't using Spock already in your project then you should move it straight away :)<br /><br /><b>PersonProcessingServiceContainerIntegrationSpec.groovy</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.person.service<br />import com.blogspot.toomuchcoding.configuration.SpringConfiguration<br />import com.blogspot.toomuchcoding.person.domain.Person<br />import org.springframework.beans.factory.annotation.Autowired<br />import org.springframework.test.context.ContextConfiguration<br />import spock.lang.Specification<br />import spock.lang.Unroll<br /><br />import static org.hamcrest.CoreMatchers.notNullValue<br /><br />@ContextConfiguration(classes = [SpringConfiguration])<br />class PersonProcessingServiceContainerIntegrationSpec extends Specification {<br /><br />    @Autowired<br />    PersonProcessingService personProcessingService<br />    <br />    def "should autowire container even though there are many implementations of service"(){       <br />        expect: <br />            personProcessingService instanceof PersonProcessingServiceContainer<br />    }<br />    <br />    def "the autowired container should not have itself in the list of autowired services"(){       <br />        expect: <br />            personProcessingService instanceof PersonProcessingServiceContainer<br />        and:<br />            !(personProcessingService as PersonProcessingServiceContainer).personProcessingServices.findResult {<br />                it instanceof PersonProcessingServiceContainer<br />            }<br />    }<br />    <br />    def "should not be applicable for processing if a person doesn't exist"(){<br />        given:<br />            Person person = null<br />        expect:<br />            !personProcessingService.isApplicableFor(person)<br />    }<br />    <br />    def "should return an empty result for a person not applicable for anything"(){<br />        given:<br />            Person person = new Person("", 17, false)<br />        when:<br />            def result = personProcessingService.process(person)<br />        then:<br />            result notNullValue()<br />            result.isEmpty()<br />    }<br /><br />    @Unroll("For name [#name], age [#age] and being stupid [#stupid] the result should contain keywords #keywords")<br />    def "should perform different processing depending on input"(){<br />        given:<br />            Person person = new Person(name, age, stupid)<br />        when:<br />            def result = personProcessingService.process(person)        <br />        then:<br />            keywords.every {<br />                result.contains(it)    <br />            }<br />        where:<br />            name  | age | stupid || keywords<br />            "jan" | 20  | true   || ['NAME', 'AGE', 'STUPID']<br />            ""    | 20  | true   || ['AGE', 'STUPID']<br />            ""    | 20  | false  || ['AGE']<br />            null  | 17  | true   || ['STUPID']<br />            "jan" | 17  | true   || ['NAME']<br />    }<br />}<br /><br /></pre></div><div>The tests are pretty straight forward:<br /><ol><li>We prove that the autowired field is in fact our container - the PersonProcessingServiceContainer.</li><li>Then we show that we can't find an object in the collection of autowired implementations of the PersonProcessingService, that is of PersonProcessingServiceContainer type</li><li>In the next two tests we prove that the logic behind our processors is working</li><li>Last but not least is the Spock's finest - the where clause that allows us create beautiful paramterized tests.</li></ol><h2>Per module feature</h2><div>Imagine the situation in which you have an implementation of the interface that is defined in your core module.</div><div><br /><pre class="brush:java">@Component<br />class CoreModuleClass implements SomeInterface {<br />...<br />}<br /><br /></pre></div><div>What if you decide in your other module that has the dependence to the core module that you don't want to use this CoreModuleClass and want to have some custom logic wherever the SomeInterface is autowired? Well - use @Primary!<br /><pre class="brush:java">@Component<br />@Primary<br />class CountryModuleClass implements SomeInterface {<br />...<br />}<br /></pre><br />In that way you are sure that wherever the SomeInterface has to be autowired it will be your CountryModuleClass that will be injected in the field.<br /><h2>Conclusion</h2></div></div>In this post you could see how to<br /><br /><ul><li>use the @Primary annotation to create a composite like container of interface implementations</li><li>use the @Primary annotation to provide a per module implementation of the interface that will take precedence over other @Components in terms of autowiring</li><li>write cool Spock tests :)</li></ul><h2>The code</h2>You can find the code presented here on&nbsp;<a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Spring/Primary">Too Much Coding's Github repository</a>&nbsp;or on&nbsp;<a href="https://bitbucket.org/gregorin1987/too-much-coding/src/6c9b91a33f7d40032ff7c650d17bf60bd8c34625/Spring/Primary/?at=default">Too Much Coding's Bitbucket repository</a>.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review of the Getting Started With Guava Book]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2013/09/30/review-of-getting-started-with-guava/"/>
    <updated>2013-09-30T22:10:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2013/09/30/review-of-getting-started-with-guava</id>
    <content type="html"><![CDATA[<div class='post'>
<span style="font-family: inherit;"><span style="color: black;">Hi!</span></span><span style="font-family: inherit;"><br /></span><br /><span style="font-family: inherit;">I didn't have much time to write posts recently (beacuse of work and my book <a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">"Mockito Instant"</a>) but&nbsp;</span><span style="font-family: inherit;">I came across Bill Bejeck's book entitled <a href="http://www.packtpub.com/getting-started-with-google-guava/book">"Getting Started with Guava"</a>. After having read it I decided that I will try also to blog about computer science related books. So without any futher ado let's move to the review :)</span><br />
<!--more-->
<span style="font-family: inherit;"></span><br /><a name='more'></a><br /><span style="font-family: inherit;"><span style="color: black;">To begin with I really enjoyed the book's structure – one can see that the author had a clear view of the book: introduction to the functionality, its presentation with examples and a short review. By keeping such a fixed structure the reader wasn't surprised by the content in each of the chapters what made reading even more pleasant.</span></span><br /><span style="font-family: inherit;"><span style="color: black;"><br /></span></span><span style="font-family: inherit;"><span style="color: black;">Let's move quickly through the book content chapter by chapter.&nbsp;</span></span><br /><span style="font-family: inherit;"><span style="color: black;"><br /></span></span><span style="font-family: inherit;"><span style="color: black;"></span></span><br /><b>Basic Guava Utilities</b><br /><div><br /></div><span style="font-family: inherit;"><span style="color: black;">First of all you will be able to increase your knowledge about joining and splitting operations on collections by means of the Joiner and Splitter classes - no more unnecessary writing of loops! You will be able also to learn how to operate on Strings using&nbsp;</span></span><span class="Apple-tab-span" style="white-space: pre;"> </span> CharMatcher, Charsets,&nbsp;Strings which often is extremely tidious and produces a lot of boilerplate code. Next you will be able to learn about Preconditions - you won't have to write those cascades of if's in terms of defensive programming. Instead how about checking a condition and throw a runtime exception? To end with the author shows how to use Guava's utility classes to create implementation of toString, hashCode and compareTo methods.<br /><div><br /></div><div><div><b>Functional Programming with Guava</b></div></div><div><br /></div><div>In this chapter the author shows how to introduce some functional approach to your Object oriented Java code with the Function, Predicate and Supplier interfaces and their corresponding utility classes Functions, Predicates and Suppliers.</div><div><br /></div><div><div><b>Working with Collections</b></div></div><div><br /></div><div>Since the Guava library emerged from issues related with collection manipulation the author could show the best examples in this chapter. You will learn about the Collections,&nbsp;FluentIterables, and Iterables utility classes. The author also mentions the Range class that you can use to represent boundaries. You will also be able to find information on other types of collections such as Bimaps (maps that aside from being navigated in the standard key to value way can be navigated from values to keys), Tables (replacement for map of maps), Multimaps (values are collections). There is also a part of the chapter related to the Ordering class that fives you additional posisbilities of working with Comparators.</div><div><br /></div><div><b>Concurrency</b></div><div><br /></div><div>The issue of concurrency is a very difficult issue as such. Guava can assist you in this difficult subject in a number of was that the author depicts: the Monitor class (version of a Mutex) can help you provide the serial access to part of your code, the Futures utility class to work with Future instances and many more cool solutions ;)</div><div><br /></div><div><b>Guava Cache</b></div><div><br /></div><div>The author shows several ways of creating caches, showing their statistics and how to configure them. You will also be able to learn how to register listeners for different cashe related types of events.&nbsp;</div><div><br /></div><div><b>The Event Bus</b></div><div><br /></div><div>The author shows how to subscribe to events by using the Google Guava's Event Bus. What I really liked about this chapter was the presentation of the reason for incorporating it in a project (loose coupling) and a sample of using it in a Spring based application.</div><div><br /></div><div><b>Working with Files</b></div><div><br /></div><div>You will be able to find presentations of the utility classes and helpful solutions related to working with IO such as Files, CharStreams, ByteStreams, Readers , Writers the Closer class (elegant way of ensuring that the Closeable instance gets properly closed). The author presents the concept behind source and sinks too. So if you work a lot with files you will find plenty of cool stuff here.</div><div><br /></div><div><b>Odds and Ends</b></div><div><br /></div><div>Useful classes related to creating hash codes, working with Throwables and creating your applications in a null safe way.</div><div><br /></div><span style="font-family: inherit;"><span style="color: black;">I would never say that I know every aspect of Guava but I tend to use a lot of its functionalities at work. That's why I was really curious about the level of details that the author wanted to present in his book and whether I would find some really interesting details of the library that I wasn't aware of. What I found in the book was very satisfactory for me because although I was already familliar with the majority of the presented examples and functionalities, still I found plenty of those „little things” that I can use to improve my code and remove more boilerplate.</span></span><span style="font-family: inherit;"><span style="color: black;"><br /></span></span><br /><span style="font-family: inherit;"><span style="color: black;">Speaking of which, what I really wanted to look at from the very beginning where the code samples showing how cool and helpful Guava really is. Being a true fan of unit testing I was very happy to see that the author put a lot of effort in those examples - the majority of functionalities were described by means of unit tests and showing some real life situations.</span></span><span style="font-family: inherit;"><span style="color: black;"><br /></span></span><br /><span style="font-family: inherit;"><span style="color: black;">To sum it up I think that Bill Bejeck has put a tremendous effort in writing his book and he has done the job exceptionally well. I would recommend „Getting Started with Guava” for both newbies and experts – for sure both of these groups will be very satisfied.</span></span></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mockito Instant - My Book Has Finally Been Published!]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2013/08/28/mockito-instant-my-book-has-finally/"/>
    <updated>2013-08-28T10:20:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2013/08/28/mockito-instant-my-book-has-finally</id>
    <content type="html"><![CDATA[<div class='post'>
I am very pleased to announce that my book about Mockito entitled "Mockito Instant" has finally been published! You can buy it at&nbsp;<a href="http://www.packtpub.com/how-to-create-stubs-mocks-spies-using-mockito/book">Packt Publishing online shop</a>.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injecting Test Doubles in Spring Using Mockito and BeanPostProcessors]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2013/08/09/injecting-test-doubles-in-spring-using/"/>
    <updated>2013-08-09T14:39:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2013/08/09/injecting-test-doubles-in-spring-using</id>
    <content type="html"><![CDATA[<div class='post'>
<br />I'm pretty sure that if you have ever used Spring and are familliar with unit testing, you have encountered a problem related to injecting mocks / spies (Test Doubles) in the Spring's application context which you wouldn't want to modify. This article presents an approach how to solve this issue using Spring's components.<br />
<!--more-->
<br /><a name='more'></a><h2>Project structure</h2>Let's start with the project structure:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-24owAXPWDec/UgS1olJ038I/AAAAAAAABlA/O90115z1yIk/s1600/Project+structure.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-24owAXPWDec/UgS1olJ038I/AAAAAAAABlA/O90115z1yIk/s320/Project+structure.jpg" width="207" /></a></div><br />As usual to present a problem I'm trying to show a very simple project structure. The approach that I'm about to show could show more benefits if I made the problem more extensive as we had in our project:<br /><br /><ul><li>we had dozens of interfaces and implementations autowired to lists</li><li>we wanted to perform some functional tests basing on the existing Spring application context&nbsp;</li><li>we wanted to verify that for certain input conditions some specific implementation would have their methods executed&nbsp;</li><li>we wanted to stub database access.</li></ul><br />In this example we have a <span style="font-family: Courier New, Courier, monospace;">PlayerService</span> that gets a <span style="font-family: Courier New, Courier, monospace;">Player </span>using a <span style="font-family: Courier New, Courier, monospace;">PlayerWebService</span>. We have an applicationContext that simply defines packages for autowiring:<br /><br /><b>applicationContext.xml</b><br /><br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;beans xmlns="http://www.springframework.org/schema/beans"<br />       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br />       xmlns:context="http://www.springframework.org/schema/context"<br />       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<br />                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;<br /><br />    &lt;context:component-scan base-package="com.blogspot.toomuchcoding"/&gt;<br /><br />&lt;/beans&gt;<br /><br /></pre>Then we have our very simple model:<br /><br /><b>Player.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.model;<br /><br />import java.math.BigDecimal;<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 08.08.13<br /> * Time: 14:38<br /> */<br />public final class Player {<br />    private final String playerName;<br />    private final BigDecimal playerValue;<br /><br />    public Player(final String playerName, final BigDecimal playerValue) {<br />        this.playerName = playerName;<br />        this.playerValue = playerValue;<br />    }<br /><br />    public String getPlayerName() {<br />        return playerName;<br />    }<br /><br />    public BigDecimal getPlayerValue() {<br />        return playerValue;<br />    }<br />}<br /><br /></pre><br />the implementation of the <span style="font-family: Courier New, Courier, monospace;">PlayerService </span>that uses <span style="font-family: Courier New, Courier, monospace;">PlayerWebService </span>to retrieve data regarding the <span style="font-family: Courier New, Courier, monospace;">Player</span>:<br /><br /><b>PlayerServiceImpl.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.service;<br /><br />import com.blogspot.toomuchcoding.model.Player;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.beans.factory.annotation.Autowired;<br />import org.springframework.stereotype.Service;<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 08.06.13<br /> * Time: 19:02<br /> */<br />@Service<br />public class PlayerServiceImpl implements PlayerService {<br />    private static final Logger LOGGER = LoggerFactory.getLogger(PlayerServiceImpl.class);<br /><br />    @Autowired<br />    private PlayerWebService playerWebService;<br /><br />    @Override<br />    public Player getPlayerByName(String playerName) {<br />        LOGGER.debug(String.format("Logging the player web service name [%s]", playerWebService.getWebServiceName()));<br />        return playerWebService.getPlayerByName(playerName);<br />    }<br /><br />    public PlayerWebService getPlayerWebService() {<br />        return playerWebService;<br />    }<br /><br />    public void setPlayerWebService(PlayerWebService playerWebService) {<br />        this.playerWebService = playerWebService;<br />    }<br />}<br /><br /></pre><br />the implementation of the PlayerWebService that is a provider of data (in this scenario we are simulating awaiting for response):<br /><br /><b>PlayerWebServiceImpl.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.service;<br /><br />import com.blogspot.toomuchcoding.model.Player;<br />import org.slf4j.Logger;<br />import org.slf4j.LoggerFactory;<br />import org.springframework.stereotype.Service;<br /><br />import java.math.BigDecimal;<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 08.08.13<br /> * Time: 14:48<br /> */<br />@Service<br />public class PlayerWebServiceImpl implements PlayerWebService {<br />    private static final Logger LOGGER = LoggerFactory.getLogger(PlayerWebServiceImpl.class);<br />    public static final String WEB_SERVICE_NAME = "SuperPlayerWebService";<br />    public static final String SAMPLE_PLAYER_VALUE = "1000";<br /><br />    @Override<br />    public String getWebServiceName() {<br />        return WEB_SERVICE_NAME;<br />    }<br /><br />    @Override<br />    public Player getPlayerByName(String name) {<br />        try {<br />            LOGGER.debug("Simulating awaiting time for a response from a web service");<br />            Thread.sleep(5000);<br />        } catch (InterruptedException e) {<br />            LOGGER.error(String.format("[%s] occurred while trying to make the thread sleep", e));<br />        }<br />        return new Player(name, new BigDecimal(SAMPLE_PLAYER_VALUE));<br />    }<br />}<br /><br /></pre>Perhaps the project structure and the methods are not one of the most brilliant you have ever seen but I wanted to keep it simple to present the problem ;)<br /><br /><h2>The problem</h2>So what actually is the problem? Let us assume that we want our autowired <span style="font-family: Courier New, Courier, monospace;">PlayerWebServiceImpl</span> to be a Spy that we can verify. What is more you don't want to actually change anything in the <span style="font-family: Courier New, Courier, monospace;">applicationContext.xml</span> - you want to use the current version of the Spring context.<br /><br />With mocks it's easier since you can define in your XML file (using Mockito factory method) your bean as a mock to override the original implementation just like this:<br /><br /><pre class="brush:xml">    &lt;bean id="playerWebServiceImpl" class="org.mockito.Mockito" factory-method="mock"&gt;<br />        &lt;constructor-arg value="com.blogspot.toomuchcoding.service.PlayerWebServiceImpl"/&gt;<br />    &lt;/bean&gt;<br /></pre><br />What about the Spy? It's more problematic since in order to create a Spy you need an already existing object of the given type. In our example we have some autowiring going on so we would have to first create a spring bean of the <span style="font-family: Courier New, Courier, monospace;">PlayerWebService </span>type (Spring would have to wire all its dependencies) and then wrap it around with<span style="font-family: Courier New, Courier, monospace;"> Mockito.spy(...)</span> and only then would it have to be wired somewhere else... It's getting very complicatied doesn't it?<br /><h2>The solution</h2>You can see that the problem is not that trivial to be solved. An easy way to fix it however is to use native Spring mechanisms - BeanPostProcessors. You can check my article about how to create a <a href="http://toomuchcoding.blogspot.com/2012/10/spring-beanpostprocessor-for-specified.html">Spring BeanPostProcessor for a specified type</a>&nbsp;- we'll be using it in this example.<br /><br />Let's start with checking the test class:<br /><br /><b>PlayerServiceImplTest.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.service;<br /><br />import com.blogspot.toomuchcoding.model.Player;<br />import org.junit.Test;<br />import org.junit.runner.RunWith;<br />import org.springframework.beans.factory.annotation.Autowired;<br />import org.springframework.test.context.ContextConfiguration;<br />import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;<br /><br />import java.math.BigDecimal;<br /><br />import static org.hamcrest.CoreMatchers.is;<br />import static org.junit.Assert.assertThat;<br />import static org.mockito.BDDMockito.doReturn;<br />import static org.mockito.Mockito.verify;<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 08.06.13<br /> * Time: 19:26<br /> */<br />@RunWith(SpringJUnit4ClassRunner.class)<br />@ContextConfiguration("classpath:testApplicationContext.xml")<br />public class PlayerServiceImplTest {<br /><br />    public static final String PLAYER_NAME = "Lewandowski";<br />    public static final BigDecimal PLAYER_VALUE = new BigDecimal("35000000");<br /><br />    @Autowired<br />    PlayerWebService playerWebServiceSpy;<br /><br />    @Autowired<br />    PlayerService objectUnderTest;<br /><br />    @Test<br />    public void shouldReturnAPlayerFromPlayerWebService(){<br />        //given<br />        Player referencePlayer = new Player(PLAYER_NAME, PLAYER_VALUE);<br />        doReturn(referencePlayer).when(playerWebServiceSpy).getPlayerByName(PLAYER_NAME);<br /><br />        //when<br />        Player player = objectUnderTest.getPlayerByName(PLAYER_NAME);<br /><br />        //then<br />        assertThat(player, is(referencePlayer));<br />        verify(playerWebServiceSpy).getWebServiceName();<br />        assertThat(playerWebServiceSpy.getWebServiceName(), is(PlayerWebServiceImpl.WEB_SERVICE_NAME));<br />    }<br /><br /><br />}<br /><br /></pre>In this test we want to mock retrieval of <span style="font-family: Courier New, Courier, monospace;">Player </span>from the <span style="font-family: Courier New, Courier, monospace;">PlayerWebService </span>(let's assume that normally it would try to send a request to the outside world - and we wouldn't want that to happen in our scenario) and test that our <span style="font-family: Courier New, Courier, monospace;">PlayerService </span>returns the <span style="font-family: Courier New, Courier, monospace;">Player </span>that we provided in the method stub and what is more we want to perform verification on the Spy that the method <span style="font-family: Courier New, Courier, monospace;">getWebServiceName()</span> has been executed and that it has a very precisely defined return value. In other words we wanted to stub the method <span style="font-family: Courier New, Courier, monospace;">getPlayerByName(...)</span> and wanted to perform verification of the spy by checking the&nbsp;<span style="font-family: Courier New, Courier, monospace;">getWebServiceName()</span><span style="font-family: inherit;">method.</span><br /><br />Let's check the test context:<br /><br /><b>testApplicationContext.xml</b><br /><br /><pre class="brush:xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;<br />&lt;beans xmlns="http://www.springframework.org/schema/beans"<br />       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br />       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;<br /><br />    &lt;import resource="applicationContext.xml"/&gt;<br />    &lt;bean class="com.blogspot.postprocessor.PlayerWebServicePostProcessor" /&gt;<br />&lt;/beans&gt;<br /></pre><br />The test context is very small since it's importing the current <span style="font-family: Courier New, Courier, monospace;">applicationContext.xml</span> and creating a Bean that is the key feature in this example - the <span style="font-family: Courier New, Courier, monospace;">BeanPostProcessor</span>:<br /><br /><b>PlayerWebServicePostProcessor.java</b><br /><br /><pre class="brush:java">package com.blogspot.postprocessor;<br /><br /><br />import com.blogspot.toomuchcoding.processor.AbstractBeanPostProcessor;<br />import com.blogspot.toomuchcoding.service.PlayerWebService;<br /><br />import static org.mockito.Mockito.spy;<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 07.05.13<br /> * Time: 11:30<br /> */<br />public class PlayerWebServicePostProcessor extends AbstractBeanPostProcessor&lt;PlayerWebService&gt; {<br />    public PlayerWebServicePostProcessor() {<br />        super(PlayerWebService.class);<br />    }<br /><br />    @Override<br />    public PlayerWebService doBefore(PlayerWebService bean) {<br />        return spy(bean);<br />    }<br /><br />    @Override<br />    public PlayerWebService doAfter(PlayerWebService bean) {<br />        return bean;<br />    }<br />}<br /><br /></pre>The class is extending the <span style="font-family: Courier New, Courier, monospace;">AbstractBeanPostProcessor </span>that implements the <a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html">BeanPostProcessor </a>interface. The logic behind this class is to register the Class for which one wants to perform some actions either before initialization (<a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessBeforeInitialization(java.lang.Object, java.lang.String)">postProcessBeforeInitialization</a>) or after initialization of the bean (<a href="http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/beans/factory/config/BeanPostProcessor.html#postProcessAfterInitialization(java.lang.Object, java.lang.String)">postProcessAfterInitialization</a>). The AbstractBeanPostProcessor is well explained in my post&nbsp;<a href="http://toomuchcoding.blogspot.com/2012/10/spring-beanpostprocessor-for-specified.html">Spring BeanPostProcessor for a specified type</a>&nbsp;but there is one slight change - in my old post we were allowed by the abstraction to perform some actions on the bean without the possibility of returning a wrapper or a proxy on the bean.<br /><br />As you can see in the case of <span style="font-family: Courier New, Courier, monospace;">PlayerWebServicePostProcessor</span>&nbsp;before initialization we are creating a Spy using <span style="font-family: Courier New, Courier, monospace;">Mockito.spy(...)</span> method. In this way we create a factory hook on the intialization of beans of given type - it's as simple as that. This method will be executed for all the classes that implement the <span style="font-family: Courier New, Courier, monospace;">PlayerWebService&nbsp;</span>interface.<br /><h2>Other possibilities</h2><div>While checking out current solutions to this problem I have encountered the <a href="https://bitbucket.org/kubek2k/springockito/wiki/Home">Springockito library</a>&nbsp;by Jakub Janczak.</div><div><br /></div><div>I haven't been using this so I don't know what are (if there are any ;) ) production issues related to this library but it seems really nice and intuitive - great job Jakub! Still, you become dependent on the external library whereas in this example I've shown how to deal with the issue using Spring.</div><h2>Summary</h2><div>In this post I've shown how to</div><div><ul><li>create mocks for existing beans using XML Spring configuration</li><li>create a BeanPostProcessor implementation that performs logic for a given class of beans</li><li>return Spy (you could also return a Mock) for the given class of bean</li></ul></div><div>Now let's move through the Prons and Cons of my approach:</div><div><b><br /></b></div><div><b>Advantages</b></div><div><ul><li>you use Spring native mechanism to create Test Doubles for your beans</li><li>you are not required to add any additional external dependencies</li><li>if you use the <span style="font-family: Courier New, Courier, monospace;">AbstractBeanPostProcessor</span> you have very little changes to implement</li></ul></div><div><b>Disadvantages</b></div><div><ul><li>you have to be familliar with internal Spring architecture (that it uses BeanPostProcessors) - but is it a disadvantage? ;) - in fact if you use the&nbsp;<span style="font-family: Courier New, Courier, monospace;">AbstractBeanPostProcessor</span>&nbsp;&nbsp;you don't have to be familliar with it - you just have to provide the class type and actions to happen before and after initialization.</li><li>it's less intuitive than annotations like in&nbsp;the&nbsp;<a href="https://bitbucket.org/kubek2k/springockito/wiki/Home">Springockito library</a></li></ul></div><h2>Sources</h2>The sources are available at <a href="https://bitbucket.org/gregorin1987/too-much-coding/src/0e7f9ad4eb4c1d2500562c3634253e26fc1e3a0e/Unit%20Testing/Mockito%20-%20Injecting%20Test%20Doubles%20in%20Spring?at=default">TooMuchCoding BitBucket repository</a> and <a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit%20Testing/Mockito%20-%20Injecting%20Test%20Doubles%20in%20Spring">TooMuchCoding Github repository</a>.<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spock - Return Nested Spies / Mocks]]></title>
    <link href="http://marcingrzejszczak.github.io/blog/2013/08/06/spock-return-nested-spies-mocks/"/>
    <updated>2013-08-06T13:24:00+02:00</updated>
    <id>http://marcingrzejszczak.github.io/blog/2013/08/06/spock-return-nested-spies-mocks</id>
    <content type="html"><![CDATA[<div class='post'>
<br />Hi! Some time ago I have written an article about Mockito and using <a href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html">RETURNS_DEEP_STUBS when working with JAXB</a>. Quite recently we have faced a similliar issue with deeply nesetd JAXB and the awesome testing framework written in Groovy called&nbsp;<a href="https://code.google.com/p/spock/">Spock</a>. Natively Spock does not support creating deep stubs or spies so we needed to create a workaround for it and this article will show you how to do it.<br />
<!--more-->
<br /><a name='more'></a><h2>Project structure</h2>We will be working on the same data structure as in the&nbsp;<a href="http://toomuchcoding.blogspot.com/2013/06/mockito-returndeepstubs-for-jaxb.html">RETURNS_DEEP_STUBS when working with JAXB</a>&nbsp;article so the project structure will be quite simillar:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-3AoyOo8WYuY/UgC3QJ5TuNI/AAAAAAAABkw/YJzt5EXB10s/s1600/Spock+Deep+Stubs+project+structure.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://4.bp.blogspot.com/-3AoyOo8WYuY/UgC3QJ5TuNI/AAAAAAAABkw/YJzt5EXB10s/s320/Spock+Deep+Stubs+project+structure.jpg" width="191" /></a></div><br />As you can see the main difference is such that the tests are present in the<span style="font-family: Courier New, Courier, monospace;"> /test/groovy/</span> folder instead of <span style="font-family: Courier New, Courier, monospace;">/test/java/</span> folder.<br /><h2>Extended Spock Specification</h2>In order to use Spock as a testing framework you have to create Groovy test scripts that extend the Spock Specification class. The details of how to use Spock are available <a href="https://code.google.com/p/spock/wiki/SpockBasics">here</a>. In this project I have created an abstract class that extends Specification and adds two additional methods for creating nested Test Doubles (I don't remember if I haven't seen a prototype of this approach somewhere on the internet).<br /><br /><b>ExtendedSpockSpecification.groovy</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.spock;<br /><br />import spock.lang.Specification<br /><br />/**<br /> * Created with IntelliJ IDEA.<br /> * User: MGrzejszczak<br /> * Date: 14.06.13<br /> * Time: 15:26<br /> */<br />abstract class ExtendedSpockSpecification extends Specification {<br />    /**<br />     * The method creates nested structure of spies for all the elements present in the property parameter. Those spies are set on the input object.<br />     *<br />     * @param object - object on which you want to create nested spies<br />     * @param property - field accessors delimited by a dot - JavaBean convention<br />     * @return Spy of the last object from the property path<br />     */<br />    protected def createNestedSpies(object, String property) {<br />        def lastObject = object<br />        property.tokenize('.').inject object, { obj, prop -&gt;<br />            if (obj[prop] == null) {<br />                def foundProp = obj.metaClass.properties.find { it.name == prop }<br />                obj[prop] = Spy(foundProp.type)<br />            }<br />            lastObject = obj[prop]<br />        }<br />        lastObject<br />    }<br /><br />    /**<br />     * The method creates nested structure of mocks for all the elements present in the property parameter. Those mocks are set on the input object.<br />     *<br />     * @param object - object on which you want to create nested mocks<br />     * @param property - field accessors delimited by a dot - JavaBean convention<br />     * @return Mock of the last object from the property path<br />     */<br />    protected def createNestedMocks(object, String property) {<br />        def lastObject = object<br />        property.tokenize('.').inject object, { obj, prop -&gt;<br />            def foundProp = obj.metaClass.properties.find { it.name == prop }<br />            def mockedProp = Mock(foundProp.type)<br />            lastObject."${prop}" &gt;&gt; mockedProp<br />            lastObject = mockedProp<br />        }<br />        lastObject<br />    }<br />}<br /><br /></pre>These two methods work in a very simillar manner.<br /><ul><li>Assuming that the&nbsp;method's argument&nbsp;<span style="font-family: Courier New, Courier, monospace;">property </span>&nbsp;looks as follows: <span style="font-family: Courier New, Courier, monospace;">"a.b.c.d"</span> then the methods tokenize the string by <span style="font-family: Courier New, Courier, monospace;">"."</span> and iterate over the array - <span style="font-family: Courier New, Courier, monospace;">["a","b","c","d"]</span>.&nbsp;</li><li>We then iterate over the properties of the <a href="http://groovy.codehaus.org/api/groovy/lang/MetaClass.html">Meta Class</a>&nbsp;to find the one whose name is equal to <span style="font-family: Courier New, Courier, monospace;">prop</span> (for example<span style="font-family: Courier New, Courier, monospace;"> "a"</span>).&nbsp;</li><li>If that is the case we then use Spock's Mock/Spy method to create a Test Double of a given class (type).&nbsp;</li><li>Finally we have to bind the mocked nested element to its parent.&nbsp;</li><ul><li>For the Spy it's easy since we set the value on the parent (<span style="font-family: Courier New, Courier, monospace;">lastObject = obj[prop]</span>).&nbsp;</li><li>For the mocks however we need to use the overloaded <span style="font-family: Courier New, Courier, monospace;">&gt;&gt;</span> operator to record the behavior for our mock - that's why dynamically call the property that is present in the <span style="font-family: Courier New, Courier, monospace;">prop</span> variable (<span style="font-family: Courier New, Courier, monospace;">lastObject."${prop}" &gt;&gt; mockedProp</span>).&nbsp;</li></ul><li>Then we return from the closure the mocked/spied instance and we repeat the process for it</li></ul><div><h2>Class to be tested</h2>Let's take a look at the class to be tested:<br /><br /><b>PlayerServiceImpl.java</b><br /><br /><pre class="brush:java">package com.blogspot.toomuchcoding.service;<br /><br />import com.blogspot.toomuchcoding.model.PlayerDetails;<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 08.06.13<br /> * Time: 19:02<br /> */<br />public class PlayerServiceImpl implements PlayerService {<br />    @Override<br />    public boolean isPlayerOfGivenCountry(PlayerDetails playerDetails, String country) {<br />        String countryValue = playerDetails.getClubDetails().getCountry().getCountryCode().getCountryCode().value();<br />        return countryValue.equalsIgnoreCase(country);<br />    }<br />}<br /></pre><h2>The test class</h2>And now the test class:<br /><br /><b>PlayerServiceImplWrittenUsingSpockTest.groovy</b></div><div></div><br /><pre class="brush:java">package com.blogspot.toomuchcoding.service<br /><br />import com.blogspot.toomuchcoding.model.*<br />import com.blogspot.toomuchcoding.spock.ExtendedSpockSpecification<br /><br />/**<br /> * User: mgrzejszczak<br /> * Date: 14.06.13<br /> * Time: 16:06<br /> */<br />class PlayerServiceImplWrittenUsingSpockTest extends ExtendedSpockSpecification {<br /><br />    public static final String COUNTRY_CODE_ENG = "ENG";<br /><br />    PlayerServiceImpl objectUnderTest<br /><br />    def setup(){<br />        objectUnderTest = new PlayerServiceImpl()<br />    }<br /><br />    def "should return true if country code is the same when creating nested structures using groovy"() {<br />        given:<br />            PlayerDetails playerDetails = new PlayerDetails(<br />                    clubDetails: new ClubDetails(<br />                            country: new CountryDetails(<br />                                    countryCode: new CountryCodeDetails(<br />                                            countryCode: CountryCodeType.ENG<br />                                    )<br />                            )<br />                    )<br />            )<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /><br />    def "should return true if country code is the same when creating nested structures using spock mocks - requires CGLIB for non interface types"() {<br />        given:<br />            PlayerDetails playerDetails = Mock()<br />            ClubDetails clubDetails = Mock()<br />            CountryDetails countryDetails = Mock()<br />            CountryCodeDetails countryCodeDetails = Mock()<br />            countryCodeDetails.countryCode &gt;&gt; CountryCodeType.ENG<br />            countryDetails.countryCode &gt;&gt; countryCodeDetails<br />            clubDetails.country &gt;&gt; countryDetails<br />            playerDetails.clubDetails &gt;&gt; clubDetails<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /><br /><br />    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedMocks"() {<br />        given:<br />            PlayerDetails playerDetails = Mock()<br />            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode &gt;&gt; CountryCodeType.ENG<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /><br />    def "should return false if country code is not the same using ExtendedSpockSpecification createNestedMocks"() {<br />        given:<br />            PlayerDetails playerDetails = Mock()<br />            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode &gt;&gt; CountryCodeType.PL<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            !playerIsOfGivenCountry<br />    }<br /><br />    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedSpies"() {<br />        given:<br />            PlayerDetails playerDetails = Spy()<br />            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode = CountryCodeType.ENG<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /><br />    def "should return false if country code is not the same using ExtendedSpockSpecification's createNestedSpies"() {<br />        given:<br />            PlayerDetails playerDetails = Spy()<br />            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode = CountryCodeType.PL<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            !playerIsOfGivenCountry<br />    }<br /><br /><br />}<br /></pre><br /><b>Let's move through the test methods one by one</b>. First I present the code and then have a quick description of the presented snippet.<br /><br /><pre class="brush:java">    def "should return true if country code is the same when creating nested structures using groovy"() {<br />        given:<br />            PlayerDetails playerDetails = new PlayerDetails(<br />                    clubDetails: new ClubDetails(<br />                            country: new CountryDetails(<br />                                    countryCode: new CountryCodeDetails(<br />                                            countryCode: CountryCodeType.ENG<br />                                    )<br />                            )<br />                    )<br />            )<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /></pre><br />Here you could find the approach of creating nested structures by using the Groovy feature of passing properties to be set in the constructor.<br /><br /><pre class="brush:java">    def "should return true if country code is the same when creating nested structures using spock mocks - requires CGLIB for non interface types"() {<br />        given:<br />            PlayerDetails playerDetails = Mock()<br />            ClubDetails clubDetails = Mock()<br />            CountryDetails countryDetails = Mock()<br />            CountryCodeDetails countryCodeDetails = Mock()<br />            countryCodeDetails.countryCode &gt;&gt; CountryCodeType.ENG<br />            countryDetails.countryCode &gt;&gt; countryCodeDetails<br />            clubDetails.country &gt;&gt; countryDetails<br />            playerDetails.clubDetails &gt;&gt; clubDetails<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /></pre><br />Here you can find a test that creates mocks using Spock - mind you that you need CGLIB as a dependency when you are mocking non interface types.<br /><br /><pre class="brush:java">    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedMocks"() {<br />        given:<br />            PlayerDetails playerDetails = Mock()<br />            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode &gt;&gt; CountryCodeType.ENG<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /></pre><br />Here you have an example of creating nested mocks using the createNestedMocks method.<br /><br /><pre class="brush:java">    def "should return false if country code is not the same using ExtendedSpockSpecification createNestedMocks"() {<br />        given:<br />            PlayerDetails playerDetails = Mock()<br />            CountryCodeDetails countryCodeDetails = createNestedMocks(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode &gt;&gt; CountryCodeType.PL<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            !playerIsOfGivenCountry<br />    }<br /></pre><br />An example showing that creating nested mocks using the createNestedMocks method really works - should return false for improper country code.<br /><br /><pre class="brush:java">    def "should return true if country code is the same using ExtendedSpockSpecification's createNestedSpies"() {<br />        given:<br />            PlayerDetails playerDetails = Spy()<br />            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode = CountryCodeType.ENG<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            playerIsOfGivenCountry<br />    }<br /></pre><br />Here you have an example of creating nested spies using the createNestedSpies method.<br /><br /><pre class="brush:java">    def "should return false if country code is not the same using ExtendedSpockSpecification's createNestedSpies"() {<br />        given:<br />            PlayerDetails playerDetails = Spy()<br />            CountryCodeDetails countryCodeDetails = createNestedSpies(playerDetails, "clubDetails.country.countryCode")<br />            countryCodeDetails.countryCode = CountryCodeType.PL<br /><br />        when:<br />            boolean playerIsOfGivenCountry = objectUnderTest.isPlayerOfGivenCountry(playerDetails, COUNTRY_CODE_ENG);<br /><br />        then:<br />            !playerIsOfGivenCountry<br />    }<br /></pre><br />An example showing that creating nested spies using the createNestedSpies method really works - should return false for improper country code.<br /><br /><h2>Summary</h2>In this post I have shown you how you can create nested mocks and spies using Spock. It can be useful especially when you are working with nested structures such as JAXB. Still you have to bear in mind that those structures to some extend violate the Law of Demeter. If you check my previous article about Mockito you would see that:<br /><blockquote class="tr_bq">We are getting the nested elements from the JAXB generated classes. Although it violates the&nbsp;<a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a>&nbsp;it is quite common to call methods of&nbsp;<b>structures</b>&nbsp;because JAXB generated classes are in fact structures so in fact I fully agree with&nbsp;<a href="http://martinfowler.com/articles/mocksArentStubs.html">Martin Fowler that it should be called the Suggestion of Demeter</a>.</blockquote>And in case of this example the idea is the same - we are talking about structures so we don't violate the Law of Demeter.<br /><br /><b>Advantages</b><br /><br /><ul><li>With a single method you can mock/spy nested elements</li><li>Code cleaner than creating tons of objects that you then have to manually set</li></ul><br /><b>Disadvantages</b><br /><br /><ul><li>Your IDE won't help you with providing the property names since the properties are presented as Strings</li><li>You have to set Test Doubles only in the Specification context (and sometimes you want to go outside this scope)</li></ul><br /><h2>Sources</h2>As usual the sources are available at&nbsp;<a href="https://bitbucket.org/gregorin1987/too-much-coding/src/9f0f64d405a0c0b8219043df9b599f60569c1633/Unit%20Testing/Spock%20-%20Deep%20Stubs?at=default">BitBucket</a>&nbsp;and&nbsp;<a href="https://github.com/marcingrzejszczak/too-much-coding/tree/master/Unit%20Testing/Spock%20-%20Deep%20Stubs">GitHub</a>.</div>
]]></content>
  </entry>
  
</feed>
